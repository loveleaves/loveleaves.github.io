<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hardware on 安哲睿</title>
        <link>https://loveleaves.github.io/categories/hardware/</link>
        <description>Recent content in Hardware on 安哲睿</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Andrew Stark</copyright>
        <lastBuildDate>Mon, 06 Oct 2025 11:19:37 +0800</lastBuildDate><atom:link href="https://loveleaves.github.io/categories/hardware/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>【Hardware】PCB设计与开发</title>
        <link>https://loveleaves.github.io/p/embedded_programing_pcb/</link>
        <pubDate>Sun, 21 Sep 2025 00:00:00 +0000</pubDate>
        
        <guid>https://loveleaves.github.io/p/embedded_programing_pcb/</guid>
        <description>&lt;h2 id=&#34;基础知识&#34;&gt;基础知识
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://pan.quark.cn/s/05650fad6466&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;零基础入门PCB设计PPT&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;pcb设计流程&#34;&gt;PCB设计流程
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://loveleaves.github.io/imgs/pcb/pcb_design_steps.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;pipeline&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;元器件选型&#34;&gt;元器件选型
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.szlcsc.com/?c=Q2&amp;amp;lcsc_vid=QlNbUldTQgMPVAFfE1gPV1NTEVJcVFUFEVVcVQUCEQQxVlNTTlVXVF1XRFhbXjsOAxUeFF5JWAIASQYPGQZABAsLWA%3D%3D&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;立创商城（也可大部分数据手册查看）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pcb版一般包含以下模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单片机最小系统：是指用最少的元件组成的单片机可以工作的系统。对于51系列单片机来说，单片机+晶振电路+复位电路,便组成了一个最小系统。晶振电路是单片机的振荡电路，通过晶振来放大输出信号。复位电路则用于重置单片机的系统状态，使其重新初始化。&lt;/li&gt;
&lt;li&gt;电源电路：单片机最小系统中的电源是指能量的来源，其中VCC(40脚)将电源的正极和GND(20脚)视为电源的输入和输出。接地端(电源负极)则用于与地面形成电气连接。&lt;/li&gt;
&lt;li&gt;外围功能电路：包括按键检测，Led指示灯，排针引出等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pcb布局要求&#34;&gt;PCB布局要求
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://hilelectronic.com/zh-CN/blog-pcb-layout/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;如何设计 PCB 布局&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1、必须根据元器件的电气特性和使用特点来布局（这点非常重要），举例如下：对于各种接口、按键和排针，需要放在板子边缘，方便插接，对于屏幕和主控芯片等，一般放在板子中央，对于电源电路，一般放在板子的电源输入旁边并且要注意电流路径和滤波电容位置（非常重要），对于晶振需要靠近单片机晶振引脚摆放等&lt;/li&gt;
&lt;li&gt;2、不要把元器件看成二维物体，而是应该看成三维物体，有时空间有干涉的情况需要考虑&lt;/li&gt;
&lt;li&gt;3、元件的布局应该采用模块化，也就是同一个模块电路的元件应该放同一个区域，按照就近原则来布局，不能东一个西一个&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pcb布线要求&#34;&gt;PCB布线要求
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/zhi_Alanwu/article/details/127588384&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【硬件设计】布线篇&amp;mdash;&amp;ndash;超实用的PCB布局布线规则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;布线顺序：&lt;/strong&gt; 关键元件优先、关键信号线优先、密度优先&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) 密度优先原则：从单板上连线最密集的区域开始布线。&lt;/li&gt;
&lt;li&gt;(2) 优先关键元器件：如DDR、射频等核心部分应优先布线，类似信号传输线应提供专层、电源、地回路。其他次要信号要顾全整体，不可以和关键信号相抵触。&lt;/li&gt;
&lt;li&gt;(3) 关键信号线优先：电源、模拟小信号、高速信号、时钟信号和同步信号等关键信号优先布线。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;布线要求：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.顶层优先原则：尽量在顶层布线&lt;/li&gt;
&lt;li&gt;2.电源线原则上要加粗：因为电源线是要给电路板各个模块供电的，电源线加粗有利于电流在主干道上流通；在日常PCB设计中，在25℃时，对于铜厚为10z(盎司)的导线，10mil线宽能够承载0.65A电流，40mil线宽能够承载2.3A电流。&lt;/li&gt;
&lt;li&gt;3.同一层内走线大于90°：同一层走线禁止90°或者走锐角，从原理上讲，锐角直角走线会造成走线阻抗不连续，对于信号的传输有影响，推荐走线135°&lt;/li&gt;
&lt;li&gt;4.注意电流路径和电容的摆放位置：电源要先经过电容滤波再给后级，去耦电容要贴近芯片引脚放置，并就近接地。&lt;/li&gt;
&lt;li&gt;5.高频信号线尽可能短，并做好与其他信号的屏蔽隔离。为了降低相邻走线之间的串扰，尽量避免相邻层平行走线，走线应遵循3W原则：相邻层信号线应采用正交方向。差分线布线尽量等距等长。&lt;/li&gt;
&lt;li&gt;6.PCB布线要尽量远离安装孔与电路板边缘：在PCB钻孔加工中，很容易会切掉一部分导线，为了电路板功能，应尽量远离这些位置。&lt;/li&gt;
&lt;li&gt;7.需要添加泪滴。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;原件符号绘制&#34;&gt;原件符号绘制
&lt;/h3&gt;&lt;p&gt;对于元件库中没有的但需要使用的原件，进行元件符号绘制与封装。&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1At421h7Ui/?spm_id_from=333.788.player.switch&amp;amp;vd_source=239d861d96125b8edb41d49a38169fda&amp;amp;p=25&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【教程】零基础入门PCB设计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1fFAfeZEBE/?spm_id_from=333.788.top_right_bar_window_default_collection.content.click&amp;amp;vd_source=239d861d96125b8edb41d49a38169fda&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【教程】大师篇-零基础入门PCB设计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://oshwhub.com/expert/works&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Expert电子实验室&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1CoGuzEEeN/?spm_id_from=333.788.top_right_bar_window_default_collection.content.click&amp;amp;vd_source=239d861d96125b8edb41d49a38169fda&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;STM32手表教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>【嵌入式编程】 嵌入式编程介绍</title>
        <link>https://loveleaves.github.io/p/embedded_programing_intro/</link>
        <pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
        
        <guid>https://loveleaves.github.io/p/embedded_programing_intro/</guid>
        <description>&lt;h2 id=&#34;嵌入式编程介绍&#34;&gt;嵌入式编程介绍
&lt;/h2&gt;&lt;p&gt;嵌入式编程（Embedded Programming）是指在嵌入式系统中编写软件的过程，嵌入式系统通常是专门为某一特定任务设计的计算机系统，不像传统计算机那样可以运行多种应用程序。嵌入式系统的应用非常广泛，从智能家居设备、汽车控制系统、工业自动化，到医疗设备等，几乎无处不在。&lt;/p&gt;
&lt;h3 id=&#34;嵌入式编程是什么&#34;&gt;嵌入式编程是什么？
&lt;/h3&gt;&lt;p&gt;嵌入式编程是为了控制嵌入式系统硬件而编写的软件。嵌入式系统通常具有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;资源有限&lt;/strong&gt;：嵌入式系统一般硬件资源有限，如内存、处理能力、电池寿命等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;任务专一&lt;/strong&gt;：嵌入式系统通常只执行单一任务或有限的几个任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高实时性&lt;/strong&gt;：很多嵌入式系统需要满足严格的实时性要求，即程序必须在特定时间内完成特定操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;稳定性高&lt;/strong&gt;：由于嵌入式设备通常需要长时间运行，因此软件的稳定性和可靠性至关重要。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;嵌入式编程不仅仅是开发简单的软件，它还需要开发者对硬件有一定了解，能够在有限的资源下优化代码，确保系统的高效和稳定运行。&lt;/p&gt;
&lt;h3 id=&#34;嵌入式编程的基础&#34;&gt;嵌入式编程的基础
&lt;/h3&gt;&lt;h4 id=&#34;硬件平台&#34;&gt;硬件平台
&lt;/h4&gt;&lt;p&gt;嵌入式编程首先需要选择合适的硬件平台。常见的嵌入式硬件平台包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;单片机（MCU）&lt;/strong&gt;：例如STMicroelectronics的STM32、Atmel的AVR系列、Microchip的PIC系列等。单片机广泛应用于各种小型设备。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开发板&lt;/strong&gt;：如树莓派、Arduino、ESP32等，它们适合快速原型开发。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FPGA&lt;/strong&gt;：如Xilinx、Intel（Altera）等的FPGA芯片，适用于对硬件有高要求的应用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ASIC&lt;/strong&gt;：定制/半定制芯片，设计用于解决特殊需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;嵌入式操作系统&#34;&gt;嵌入式操作系统
&lt;/h4&gt;&lt;p&gt;对于一些复杂的嵌入式应用，开发者需要选择合适的操作系统来管理硬件资源。常见的嵌入式操作系统有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RTOS（实时操作系统）&lt;/strong&gt;：如FreeRTOS、ChibiOS等，适用于需要高实时性的嵌入式应用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;：例如在树莓派等开发板上运行嵌入式Linux，适用于需要丰富功能和较强处理能力的系统。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;裸机编程&lt;/strong&gt;：没有操作系统支持，直接对硬件进行编程，适用于资源较为有限的设备。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;编程语言&#34;&gt;编程语言
&lt;/h4&gt;&lt;p&gt;嵌入式开发常用的编程语言主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C语言&lt;/strong&gt;：由于其高效、底层控制能力和较小的代码体积，C语言是嵌入式编程中最常用的语言。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C++&lt;/strong&gt;：对于一些更复杂的系统，C++提供了面向对象的特性，帮助开发者更好地管理代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;汇编语言&lt;/strong&gt;：在一些资源非常有限或者对性能要求极高的场景下，可能需要使用汇编语言来直接控制硬件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;嵌入式编程工具&#34;&gt;嵌入式编程工具
&lt;/h4&gt;&lt;p&gt;嵌入式开发离不开合适的开发工具，这些工具通常包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IDE（集成开发环境）&lt;/strong&gt;：如Keil、IAR Embedded Workbench、Eclipse等，用于编写、编译和调试嵌入式代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编译器&lt;/strong&gt;：GCC（GNU Compiler Collection）是最常用的开源编译器，它支持多种架构的嵌入式开发。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调试工具&lt;/strong&gt;：JTAG调试器、SWD（Serial Wire Debug）调试器等，用于硬件级调试，帮助开发者实时查看代码执行状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;仿真器&lt;/strong&gt;：一些开发环境如Proteus提供硬件仿真，帮助开发者在没有实际硬件的情况下测试代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cloud.tencent.com/developer/news/442444&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;soc介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/qcloud1001/p/6617764.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;深入理解CPU和异构计算芯片GPU/FPGA/ASIC （上篇）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>

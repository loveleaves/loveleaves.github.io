<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Tool on 安哲睿</title>
        <link>https://loveleaves.github.io/categories/tool/</link>
        <description>Recent content in Tool on 安哲睿</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Andrew Stark</copyright>
        <lastBuildDate>Wed, 19 Feb 2025 00:00:10 +0800</lastBuildDate><atom:link href="https://loveleaves.github.io/categories/tool/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>【Tool】 记录各种用到的工具</title>
        <link>https://loveleaves.github.io/p/tool/</link>
        <pubDate>Sun, 05 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://loveleaves.github.io/p/tool/</guid>
        <description>&lt;h2 id=&#34;references&#34;&gt;References
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/673459718&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HPC/ML/OS/SW性能工具总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;汇编嵌入式编程工具&#34;&gt;汇编/嵌入式编程工具
&lt;/h2&gt;&lt;p&gt;在 Linux 环境下进行汇编或嵌入式编程时，涉及的工具和程序非常广泛，包括编译器、调试工具、构建系统、性能分析工具等。下面是一些常见的汇编或嵌入式编程工具的详细介绍：&lt;/p&gt;
&lt;h3 id=&#34;汇编工具-assembly-tools&#34;&gt;汇编工具 (Assembly Tools)
&lt;/h3&gt;&lt;h4 id=&#34;gas-gnu-assembler&#34;&gt;GAS (GNU Assembler)
&lt;/h4&gt;&lt;p&gt;GAS 是 GNU 编译器集合（GCC）的一部分，专门用于将汇编语言转换成机器代码（即目标文件）。它支持多种体系结构，适用于嵌入式系统开发，通常与 GCC 配合使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用选项：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-o &amp;lt;file&amp;gt;&lt;/code&gt;: 指定输出文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-g&lt;/code&gt;: 生成调试信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D &amp;lt;macro&amp;gt;&lt;/code&gt;: 定义宏。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;as -o main.o main.s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;交叉编译工具链-cross-compiler-toolchain&#34;&gt;交叉编译工具链 (Cross Compiler Toolchain)
&lt;/h3&gt;&lt;h4 id=&#34;gcc-gnu-compiler-collection&#34;&gt;GCC (GNU Compiler Collection)
&lt;/h4&gt;&lt;p&gt;GCC 是用于 C、C++、Fortran 等语言的编译器，常用于嵌入式编程中。它可以生成目标平台的代码，并支持交叉编译（cross-compilation），即在一种平台上为另一种平台编译代码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用选项：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-o &amp;lt;file&amp;gt;&lt;/code&gt;: 输出文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-mcpu=&amp;lt;target&amp;gt;&lt;/code&gt;: 指定目标架构（如 ARM、MIPS）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-m32&lt;/code&gt; 或 &lt;code&gt;-m64&lt;/code&gt;: 设置生成的代码是 32 位或 64 位。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;arm-none-eabi-gcc -o my_program.elf main.c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;clang&#34;&gt;Clang
&lt;/h4&gt;&lt;p&gt;Clang 是 LLVM 项目的一部分，作为 GCC 的替代品，Clang 提供了高效的编译功能，并且具有更加友好的错误报告。它同样支持交叉编译，特别适合现代嵌入式编程和集成开发环境（IDE）中使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用选项：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-target &amp;lt;target&amp;gt;&lt;/code&gt;: 指定目标平台。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-o &amp;lt;file&amp;gt;&lt;/code&gt;: 输出文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;clang -target arm-none-eabi -o my_program.elf main.c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;binutils&#34;&gt;Binutils
&lt;/h4&gt;&lt;p&gt;Binutils 是一组二进制工具，包括汇编器、链接器、调试器等，广泛用于嵌入式系统开发。&lt;code&gt;ld&lt;/code&gt; 和 &lt;code&gt;as&lt;/code&gt; 工具是其中最常用的，负责汇编、链接以及生成目标文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用工具：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;as&lt;/code&gt;：汇编源文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ld&lt;/code&gt;：链接目标文件生成最终的可执行文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;objcopy&lt;/code&gt;：将目标文件转换为不同格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;as -o main.o main.s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ld -o my_program.elf main.o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;调试工具-debugging-tools&#34;&gt;调试工具 (Debugging Tools)
&lt;/h3&gt;&lt;h4 id=&#34;gdb-gnu-debugger&#34;&gt;GDB (GNU Debugger)
&lt;/h4&gt;&lt;p&gt;GDB 是一个功能强大的调试工具，适用于 C/C++ 等程序的调试。在嵌入式开发中，GDB 通常配合交叉编译工具链和硬件调试器（如 JTAG、SWD）一起使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用命令：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;run&lt;/code&gt;：启动程序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break &amp;lt;line&amp;gt;&lt;/code&gt;：在指定行设置断点。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;step&lt;/code&gt;：单步执行，进入函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next&lt;/code&gt;：单步执行，不进入函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gdb my_program.elf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;openocd&#34;&gt;OpenOCD
&lt;/h4&gt;&lt;p&gt;OpenOCD 是一个用于与目标硬件（如 ARM 处理器）进行通信的调试工具。它支持通过 JTAG 或 SWD 接口进行调试，可以与 GDB 配合使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用命令：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;targets&lt;/code&gt;：列出连接的目标。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reset halt&lt;/code&gt;：复位并停止目标。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flash write_image erase &amp;lt;file&amp;gt; 0x0&lt;/code&gt;：将固件烧录到设备。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openocd -f interface/stlink-v2.cfg -f target/stm32f4x.cfg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;jlink-segger-j-link&#34;&gt;JLink (SEGGER J-Link)
&lt;/h4&gt;&lt;p&gt;JLink 是 SEGGER 提供的一个商业级调试器，支持 JTAG 和 SWD 接口，用于调试各种嵌入式设备。它提供高性能的调试功能，广泛用于工业和开发中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主要功能：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持高速调试，能够快速读写内存和寄存器。&lt;/li&gt;
&lt;li&gt;与多种 IDE（如 Keil、IAR、Eclipse）兼容。&lt;/li&gt;
&lt;li&gt;提供强大的脚本支持和自动化功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;常用命令：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;connect: 连接目标硬件。&lt;/li&gt;
&lt;li&gt;r: 重置目标设备。&lt;/li&gt;
&lt;li&gt;loadfile &lt;file&gt;: 加载二进制文件到目标设备。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;JLinkExe -device STM32F407VG -if SWD
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;lldb&#34;&gt;LLDB
&lt;/h4&gt;&lt;p&gt;LLDB 是 LLVM 提供的调试工具，类似于 GDB，但更加现代化。它具有更高效的性能，特别适用于基于 Clang 的编译工具链。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用命令：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;run&lt;/code&gt;：启动程序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;breakpoint set&lt;/code&gt;：设置断点。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;step&lt;/code&gt;：单步执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lldb my_program.elf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;构建工具-build-tools&#34;&gt;构建工具 (Build Tools)
&lt;/h3&gt;&lt;h4 id=&#34;make&#34;&gt;Make
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Make&lt;/code&gt; 是一个非常常用的构建工具，使用 &lt;code&gt;Makefile&lt;/code&gt; 管理项目的编译过程。它会根据 &lt;code&gt;Makefile&lt;/code&gt; 中的规则自动执行编译、链接等操作，尤其适合嵌入式项目。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用命令：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;：构建项目。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make clean&lt;/code&gt;：清理编译结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;make -f Makefile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;cmake&#34;&gt;CMake
&lt;/h4&gt;&lt;p&gt;CMake 是一个跨平台的自动化构建工具，可以生成适用于不同平台的构建文件（如 Makefile、Ninja 文件等）。它在现代嵌入式开发中非常流行，支持复杂的项目构建配置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用命令：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cmake .&lt;/code&gt;：生成构建文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;：执行构建。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cmake .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;make
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;其他工具&#34;&gt;其他工具
&lt;/h3&gt;&lt;h4 id=&#34;nm&#34;&gt;nm
&lt;/h4&gt;&lt;p&gt;nm 是一个用于列出二进制文件（例如可执行文件、共享库、目标文件等）符号表的工具。它显示文件中定义和引用的符号，包括函数、变量等。通过 nm，用户可以查看符号的类型和地址信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用选项：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nm &lt;file&gt;: 列出指定文件的符号。&lt;/li&gt;
&lt;li&gt;-g: 只显示全局符号。&lt;/li&gt;
&lt;li&gt;-n 或 &amp;ndash;numeric-sort: 按地址排序符号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nm my_program&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;grep func
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;objdump&#34;&gt;Objdump
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;objdump&lt;/code&gt; 用于反汇编和查看目标文件的详细信息。它可以显示汇编代码、符号表、段信息等，帮助开发人员理解程序的低级结构。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用命令：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;objdump -d &amp;lt;file&amp;gt;&lt;/code&gt;：反汇编文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;objdump -t &amp;lt;file&amp;gt;&lt;/code&gt;：显示符号表。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;objdump -d my_program
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;readelf&#34;&gt;Readelf
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;readelf&lt;/code&gt; 用于显示 ELF 文件的详细信息，提供比 &lt;code&gt;objdump&lt;/code&gt; 更加专注于 ELF 文件结构的查看。它支持查看 ELF 头、段、节区、符号表等信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用命令：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;readelf -h &amp;lt;file&amp;gt;&lt;/code&gt;：显示 ELF 文件头信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readelf -S &amp;lt;file&amp;gt;&lt;/code&gt;：显示节区信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;readelf -h my_program
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;热点分析&#34;&gt;热点分析
&lt;/h2&gt;&lt;p&gt;热点分析通常通过使用 性能分析工具 来实现，工具会提供每个函数、方法、代码块的执行时间、调用次数、CPU 占用率等信息，帮助开发人员识别耗时最多的部分。&lt;/p&gt;
&lt;h3 id=&#34;常见的热点分析方法&#34;&gt;常见的热点分析方法
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;调用图（Call Graph）：通过调用图分析函数之间的调用关系，找到调用最频繁的部分。&lt;/li&gt;
&lt;li&gt;性能剖析（Profiling）：通过工具生成程序运行时的性能数据，分析哪些函数或代码块占用了最多的时间或资源。&lt;/li&gt;
&lt;li&gt;热代码路径（Hot Code Path）分析：关注那些频繁执行的路径或分支，优化这些路径的性能。&lt;/li&gt;
&lt;li&gt;内存热点分析：分析程序中哪些数据结构或对象频繁创建、销毁，导致内存管理不善或频繁的垃圾回收。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实际操作&#34;&gt;实际操作
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;函数级分析：分析程序中的每个函数，找出耗时最多的函数并进行优化。&lt;/li&gt;
&lt;li&gt;多线程/并发分析：对于并发程序，热点分析还要考虑线程的执行时间、锁竞争和同步问题，识别线程间的性能瓶颈。&lt;/li&gt;
&lt;li&gt;内存分析：分析内存的分配和释放，找出内存泄漏或频繁的内存分配导致的性能瓶颈。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;性能分析工具&#34;&gt;性能分析工具
&lt;/h2&gt;&lt;h3 id=&#34;gprofgnu-profile工具&#34;&gt;gprof：GNU profile工具
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;适用语言：C、C++、Pascal、Fortran&lt;/li&gt;
&lt;li&gt;介绍：用于程序的性能优化以及程序瓶颈问题的查找和解决。通过分析应用程序运行时产生的“flat profile”，可以得到每个函数的调用次数，每个函数消耗的处理器时间，也可以得到函数的“调用关系图”，包括函数调用的层次关系，每个函数调用花费了多少时间。&lt;/li&gt;
&lt;li&gt;缺点：对并行程序支持较差，不能提供细粒度的分析，主要适用于函数级别的性能分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;使用步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、用gcc、g++、xlC编译程序时，使用-pg参数，如：g++ -pg -o test test.cpp。编译器会自动在目标代码中插入用于性能测试的代码片断，这些代码在程序运行时采集并记录函数的调用关系和调用次数，并记录函数自身执行时间和被调用函数的执行时间。&lt;/li&gt;
&lt;li&gt;2、执行编译后的可执行程序，如：./test。该步骤运行程序的时间会稍慢于正常编译的可执行程序的运行时间。程序运行结束后，会在程序所在路径下生成一个缺省文件名为gmon.out的文件，这个文件就是记录程序运行的性能、调用关系、调用次数等信息的数据文件。&lt;/li&gt;
&lt;li&gt;3、使用gprof命令来分析记录程序运行信息的gmon.out文件，如：gprof test gmon.out。则可以在显示器上看到函数调用相关的统计、分析信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;perf&#34;&gt;Perf
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;适用语言： C, C++&lt;/li&gt;
&lt;li&gt;平台： Linux&lt;/li&gt;
&lt;li&gt;特点： Perf 是 Linux内置的性能分析工具，可用于分析 CPU 使用率、内存访问、系统调用等。它是一个命令行工具。适用于深度的 Linux 系统级性能分析。&lt;/li&gt;
&lt;li&gt;缺点：需要一定的学习成本，报告可能较为复杂。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Perf是一个&lt;strong&gt;很大的工具&lt;/strong&gt;，此处仅展示分析某个应用的的用法。
&lt;strong&gt;使用步骤（使用gprof的那个可执行文件）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、perf record ./test，部分性能参数需要root权限&lt;/li&gt;
&lt;li&gt;2、perf report&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.brendangregg.com/perf.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.brendangregg.com/perf.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://perfwiki.github.io/main/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;perf tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_17743307/article/details/123081487&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WSL2安装perf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/530622057&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;perf原理及火焰图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/134721612&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;perf分析c热点函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;perf简单例子-程序调用栈火焰图&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;perf record -F 99 -p 2347 -g -- sleep 30
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# perf record表示采集系统事件, 没有使用 -e 指定采集事件, 则默认采集 cycles(即 CPU clock 周期), -F 99 表示每秒 99 次, -p 2347 是进程号, 即对哪个进程进行分析, -g 表示记录调用栈, sleep 30 则是持续 30 秒.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 统计每个调用栈出现的百分比, 然后从高到低排列
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;perf report -n –stdio
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 解析perf收集的信息
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;perf script -i perf.data &amp;amp;&amp;gt; perf.unfold
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 生成折叠后的调用栈
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 使用开源软件：https://github.com/brendangregg/FlameGraph.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;./stackcollapse-perf.pl perf.unfold &amp;amp;&amp;gt; perf.folded
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 生成火焰图
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;./flamegraph.pl perf.folded &amp;gt; perf.svg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;perf简单例子-分析热点函数、指令&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 通过-g选项保留源代码信息
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gcc -g test.c -o test
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 通过perf record命令对test程序采样，-g表示采样调用栈
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;perf record -F 999 ./test
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 查看热点分布
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;perf report
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 查看热点函数testA中的热点指令及语句
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;perf annotate --stdio --symbol=testA
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;intel-vtune-profiler&#34;&gt;Intel VTune Profiler
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;适用语言： 多语言支持&lt;/li&gt;
&lt;li&gt;平台： Windows、Linux&lt;/li&gt;
&lt;li&gt;特点： Intel VTune Profiler 是一个功能强大的性能分析工具，可用于分析 CPU 使用率、内存访问、多线程性能等。适用于 &lt;strong&gt;Intel&lt;/strong&gt; 处理器。&lt;/li&gt;
&lt;li&gt;可以看到 perf 看不到L3cache 等硬件特性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;references&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/bandaoyu/p/16751995.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cnblogs.com/bandaoyu/p/16751995.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/12642264312&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/12642264312&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/yaojingqingcheng/article/details/120335335&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/yaojingqingcheng/article/details/120335335&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tau&#34;&gt;TAU
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;适用语言： C、C++、python&lt;/li&gt;
&lt;li&gt;官网：https://www.cs.uoregon.edu/research/tau/home.php&lt;/li&gt;
&lt;li&gt;特点： 是一个面向MPI与OpenMP并行程序的profiler，在目前看到的OpenMPI的Profiler中算是比较健全的一个。相比于Intel的vtune面向OpenMPI的时候会有些限制，TAU可以根据不同的MPI发行版重新编译。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;references&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/undermyth/p/17253435.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TAU Profiler安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cs.uoregon.edu/research/tau/docs/newguide/ch03s09.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/Johnsonjjj/article/details/103731954&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;使用性能测试工具TAU测试MPI程序记录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.showapi.com/news/article/66c15dc24ddd79f11a0f7cee&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;深入解析TAU工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;gpu-分析工具&#34;&gt;GPU 分析工具
&lt;/h2&gt;&lt;p&gt;全部工具：https://developer.nvidia.com/tools-overview&lt;/p&gt;
&lt;h3 id=&#34;cuda-gdb&#34;&gt;cuda-gdb
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.nvidia.com/cuda-gdb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cuda-gdb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-g -G&lt;/code&gt;编译选项&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nsight-compute&#34;&gt;Nsight Compute
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;nvprof，计算能力8.0以下使用&lt;/li&gt;
&lt;li&gt;注意系统要求（如win11 ws2才支持）：&lt;a class=&#34;link&#34; href=&#34;https://docs.nvidia.com/nsight-compute/ReleaseNotes/index.html#system-requirements&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;system-requirements&lt;/a&gt;、&lt;a class=&#34;link&#34; href=&#34;https://forums.developer.nvidia.com/t/unknown-error-on-device-0-when-running-ncu-on-wsl/313742&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;unknown-error-on-device-0-when-running-ncu-on-wsl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;使用方案：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、用户界面：https://docs.nvidia.com/nsight-compute/NsightCompute/index.html&lt;/li&gt;
&lt;li&gt;2、CLI方式：https://docs.nvidia.com/nsight-compute/NsightComputeCli/index.html&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;computesanitizer&#34;&gt;ComputeSanitizer
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.nvidia.com/compute-sanitizer/ComputeSanitizer/index.html#id1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.nvidia.com/compute-sanitizer/ComputeSanitizer/index.html#id1&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能正确性检查工具，包含：memcheck、racecheck、initcheck、synccheck等&lt;/li&gt;
&lt;li&gt;cuda12.0以下内存检查使用&lt;a class=&#34;link&#34; href=&#34;https://developer.nvidia.com/cuda-memcheck&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CUDA-MEMCHECK&lt;/a&gt;，以上使用ComputeSanitizer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hpctoolkit&#34;&gt;HPCtoolkit
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;适用语言： C、C++、CUDA&lt;/li&gt;
&lt;li&gt;官网：&lt;a class=&#34;link&#34; href=&#34;https://github.com/HPCToolkit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HPCToolkit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;特点：支持CUDA&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;内存分析工具&#34;&gt;内存分析工具
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;gdb：-g源码调试&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tsan&#34;&gt;tsan
&lt;/h3&gt;&lt;p&gt;TSan（ThreadSanitizer）是一个用于检测多线程程序中的 &lt;strong&gt;数据竞争&lt;/strong&gt; 和 &lt;strong&gt;线程安全问题&lt;/strong&gt; 的工具。它是由 Google 开发的，用于帮助开发者发现并修复多线程程序中的并发问题，这些问题可能导致难以复现的错误和难以调试的行为。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 什么是数据竞争？&lt;/strong&gt;
数据竞争是指多个线程并发地访问同一块内存区域，并且至少有一个线程在写入该内存区域，而其他线程可能在读或写该内存。数据竞争通常会导致不可预测的程序行为，比如程序崩溃、结果错误等。数据竞争的问题尤其难以发现，因为它们通常依赖于程序执行的特定时序和上下文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. TSan 的功能&lt;/strong&gt;
ThreadSanitizer 是一种 动态检测工具，它能够监测并发程序中的线程交互，并在检测到数据竞争时，给出详细的报告。它通过 **插桩（Instrumentation） **方式，插入检查代码，追踪每个线程对共享内存的访问，以此来检测潜在的数据竞争。&lt;/p&gt;
&lt;p&gt;具体功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检测数据竞争：在多线程程序中，TSan 能够发现不同线程对同一内存位置的并发访问（读-写或写-写），并且报告潜在的数据竞争。&lt;/li&gt;
&lt;li&gt;报告细节：当 TSan 检测到数据竞争时，会提供详细的错误报告，包含竞争发生的栈信息、线程信息、访问的内存位置等，帮助开发者定位问题。&lt;/li&gt;
&lt;li&gt;跨平台支持：TSan 支持 Linux、macOS、Android 和其他平台，通常与 Clang 和 GCC 编译器兼容。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. 如何使用 TSan&lt;/strong&gt;
TSan 是通过编译器插件实现的，因此需要在编译程序时启用它。以下是启用 TSan 的基本步骤：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 1、编译时启用 TSan，使编译器将 TSan 插桩到代码中，在程序运行时启用线程安全检查。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;g++ -fsanitize=thread -g test.cpp -o test
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 2、运行时，程序将被 TSsan 监控，检测线程间的竞争。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;./test
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 如果程序中有数据竞争，TSan 会输出类似以下的报告：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ThreadSanitizer: data race in function &amp;#39;foo&amp;#39; at address 0x601000000020
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  #0 0x7f89b5cb5e6f in foo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  #1 0x7f89b5cb5e79 in bar
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  #2 0x7f89b5cb5f89 in main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;TSan 会提供详细的栈跟踪，指出哪些线程、哪些内存地址、在哪些函数中发生了数据竞争。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;4. TSan 的工作原理&lt;/strong&gt;
TSan 通过对程序进行 &lt;strong&gt;插桩&lt;/strong&gt;，在程序中每次内存访问（读/写）时插入检查代码，追踪每个线程对内存的访问。它会记录每个线程对共享内存的访问并进行比较，以判断是否存在数据竞争。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主要机制：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存访问追踪：TSan 会追踪每个线程对内存地址的访问情况，记录访问的时间戳和线程标识。&lt;/li&gt;
&lt;li&gt;同步原语检测：TSan 会检查线程之间的同步操作（如 mutex、lock、atomic）是否正确使用，确保线程安全。&lt;/li&gt;
&lt;li&gt;数据竞争检测：如果两个线程访问同一内存位置，并且至少一个是写操作，TSan 会标记为潜在的数据竞争。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;5. TSan 检测的线程安全问题&lt;/strong&gt;
除了检测数据竞争，TSan 还可以帮助识别以下并发编程中的常见问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;死锁：如果两个线程因相互等待而导致死锁，TSan 也可以通过检测锁的顺序和依赖关系来帮助识别死锁。&lt;/li&gt;
&lt;li&gt;非原子操作：在多线程环境中，如果某些操作不是原子的，可能会导致竞态条件。TSan 可以通过对同步操作的检查，帮助发现这些问题。&lt;/li&gt;
&lt;li&gt;不当的内存同步：如果线程没有适当的同步机制（如 mutex 或 atomic）来协调对共享数据的访问，可能会出现竞态条件，TSan 会标记这些不安全的内存访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;6. TSan 的优点和限制&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：能够捕获到很难复现的多线程问题，提供详细的报告，包括访问的内存位置、线程栈、数据竞争的上下文，帮助开发者快速定位并修复问题。&lt;/li&gt;
&lt;li&gt;限制：会有一定的性能开销（开发阶段使用），可能不会检测所有类型的并发问题，特别是某些边缘情况或者深度依赖于硬件的并发问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;addresssanitizer-asan&#34;&gt;AddressSanitizer (ASan)
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;ASan&lt;/strong&gt;（&lt;strong&gt;AddressSanitizer&lt;/strong&gt;）是一个用于检测 &lt;strong&gt;内存错误&lt;/strong&gt; 的强大工具，特别是针对 &lt;strong&gt;缓冲区溢出&lt;/strong&gt;、&lt;strong&gt;堆栈溢出&lt;/strong&gt;、&lt;strong&gt;使用后释放&lt;/strong&gt;（use-after-free）等常见内存问题。ASan 是由 Google 开发的，作为一个 &lt;strong&gt;编译时检测工具&lt;/strong&gt;，它可以在程序运行时检测出许多类型的内存错误，并提供详细的错误报告。ASan 可以用于 &lt;strong&gt;C&lt;/strong&gt; 和 &lt;strong&gt;C++&lt;/strong&gt; 等语言，广泛应用于开发和测试阶段，帮助开发者发现和修复难以调试的内存错误。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;ASan 的功能&lt;/strong&gt;
ASan 的核心功能是通过 &lt;strong&gt;内存访问跟踪&lt;/strong&gt; 来检测程序中的各种内存错误。它能有效检测以下几类常见的内存问题：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;缓冲区溢出&lt;/strong&gt;（Buffer Overflow）：当程序写入超出分配内存的区域时，会导致数据损坏或程序崩溃。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;堆栈溢出&lt;/strong&gt;（Stack Overflow）：当程序的栈内存超出预定范围时，可能会覆盖局部变量或函数返回地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用后释放&lt;/strong&gt;（Use-After-Free）：指在内存被释放后，程序仍然访问该内存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存泄漏&lt;/strong&gt;（Memory Leak）：指程序分配了内存但没有释放，导致内存消耗不断增加。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;双重释放&lt;/strong&gt;（Double Free）：指在释放内存后再次释放该内存，可能导致程序崩溃。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;未初始化内存读取&lt;/strong&gt;（Use of Uninitialized Memory）：程序读取未初始化的内存内容，可能导致不可预测的行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;ASan 的工作原理&lt;/strong&gt;
ASan 通过 &lt;strong&gt;编译器插桩&lt;/strong&gt;（Instrumenting Compiler）和 &lt;strong&gt;运行时库&lt;/strong&gt;（Runtime Library）的配合工作来检测内存错误。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;编译时插桩&lt;/strong&gt;：在程序的源代码编译过程中，ASan 会插入额外的检查代码，这些代码会在程序运行时检查每个内存访问，确保它们在合法的内存范围内。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存分配替换&lt;/strong&gt;：ASan 会替换程序的 &lt;strong&gt;内存分配函数&lt;/strong&gt;（如 &lt;code&gt;malloc&lt;/code&gt;、&lt;code&gt;free&lt;/code&gt;、&lt;code&gt;new&lt;/code&gt;、&lt;code&gt;delete&lt;/code&gt;）来监控内存的分配和释放操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存红区（Redzones）&lt;/strong&gt;：ASan 在每个内存块的前后插入一些特殊的 &amp;ldquo;红区&amp;rdquo;（Redzones），这些区域用于检测 &lt;strong&gt;越界访问&lt;/strong&gt;。如果程序试图访问红区，ASan 会报告错误。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运行时检测&lt;/strong&gt;：当程序访问非法内存时，ASan 会触发 &lt;strong&gt;运行时错误检测&lt;/strong&gt;，并输出详细的错误信息（如错误的内存地址、堆栈信息等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;如何使用 ASan&lt;/strong&gt;
要启用 AddressSanitizer，您需要在编译时添加 &lt;code&gt;-fsanitize=address&lt;/code&gt; 选项，并启用调试信息 &lt;code&gt;-g&lt;/code&gt;（以便于调试）。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;g++ -fsanitize&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;address -g -o &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; test.cpp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;ASan 错误报告&lt;/strong&gt;
当 ASan 检测到内存错误时，它会生成详细的错误报告。该报告通常包含以下信息：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;错误类型&lt;/strong&gt;：如 &lt;strong&gt;use-after-free&lt;/strong&gt;、&lt;strong&gt;buffer overflow&lt;/strong&gt;、&lt;strong&gt;stack overflow&lt;/strong&gt; 等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误位置&lt;/strong&gt;：报告发生错误的内存地址，指出程序在哪里进行非法内存访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用栈&lt;/strong&gt;：ASan 会提供程序的调用栈信息，帮助开发者快速定位问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存布局&lt;/strong&gt;：显示内存分配情况，包括程序访问的内存区域和红区位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;strong&gt;ASan 检测的内存问题&lt;/strong&gt;
ASan 可以检测的内存问题包括：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;堆栈溢出（Stack Overflow）&lt;/strong&gt;：当局部变量超出栈边界时，ASan 会报告堆栈溢出。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓冲区溢出（Buffer Overflow）&lt;/strong&gt;：当访问超出数组或缓冲区的范围时，ASan 会检测到缓冲区溢出。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用后释放（Use-After-Free）&lt;/strong&gt;：在内存被释放后，如果程序继续使用该内存，ASan 会报告此错误。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存泄漏（Memory Leak）&lt;/strong&gt;：ASan 可以检测到程序中未释放的内存（通过启用 &lt;code&gt;-fsanitize=address&lt;/code&gt; 和使用 &lt;code&gt;ASAN_OPTIONS=detect_leaks=1&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;双重释放（Double Free）&lt;/strong&gt;：当程序尝试两次释放同一块内存时，ASan 会报告此问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;未初始化内存访问（Use of Uninitialized Memory）&lt;/strong&gt;：当程序访问未初始化的内存时，ASan 会报告此错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;&lt;strong&gt;ASan 的优点和缺点&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;优点：高效的内存错误检测、易于使用、详细的错误报告、广泛支持。&lt;/li&gt;
&lt;li&gt;缺点：性能开销、仅支持动态检测、依赖编译器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;valgrind&#34;&gt;valgrind
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;平台：Linux / macOS / Windows（通过 Cygwin）&lt;/li&gt;
&lt;li&gt;用途：Valgrind 是一款开源的动态分析工具，广泛用于 内存分析，如查找内存泄漏、内存越界等问题。
&lt;strong&gt;功能：&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Memcheck：用于检测内存泄漏、越界访问和未初始化的内存读取。&lt;/li&gt;
&lt;li&gt;Cachegrind：用于缓存行为分析，评估 CPU 缓存的命中率。&lt;/li&gt;
&lt;li&gt;Callgrind：支持函数级别的性能分析，提供详细的 CPU 性能数据。&lt;/li&gt;
&lt;li&gt;Helgrind：用于检测并发程序中的数据竞争。
&lt;strong&gt;适用场景&lt;/strong&gt;：适用于内存优化、程序调试和多线程程序的性能分析。
&lt;strong&gt;使用方式&lt;/strong&gt;：通过命令行运行程序时加上 valgrind，比如 valgrind &amp;ndash;leak-check=full ./my_program。
&lt;strong&gt;优点&lt;/strong&gt;：强大的内存分析功能，能够检测很多潜在的错误。
&lt;strong&gt;缺点&lt;/strong&gt;：运行时开销较大，程序执行速度可能会减慢。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ebpf-extended-berkeley-packet-filter&#34;&gt;eBPF (Extended Berkeley Packet Filter)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;类型：内核性能分析工具&lt;/li&gt;
&lt;li&gt;功能：eBPF 可以用于监控系统的 CPU 使用情况、内存分配、I/O 性能、网络流量 等。&lt;/li&gt;
&lt;li&gt;使用场景：eBPF 适用于 Linux 系统的全栈性能分析，特别是在容器化环境中（如 Kubernetes、Docker）。&lt;/li&gt;
&lt;li&gt;优点：能够高效且低开销地进行性能分析，实时提供系统各个层次的性能数据。&lt;/li&gt;
&lt;li&gt;缺点：需要一定的学习成本，并且工具的设置可能比较复杂。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在现代计算中，性能优化是提高程序效率、响应时间、资源利用率等重要方面的核心工作。不同类型的性能瓶颈可以通过不同的优化策略来解决，常见的优化策略包括&lt;strong&gt;并行度优化&lt;/strong&gt;、&lt;strong&gt;数据传输优化&lt;/strong&gt;、&lt;strong&gt;存储器访问优化&lt;/strong&gt;、&lt;strong&gt;向量化优化&lt;/strong&gt;、&lt;strong&gt;负载均衡优化&lt;/strong&gt;和&lt;strong&gt;多线程扩展性优化&lt;/strong&gt;。下面将详细介绍每个优化策略。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;性能优化策略&#34;&gt;性能优化策略
&lt;/h2&gt;&lt;h3 id=&#34;1-并行度优化parallelism-optimization&#34;&gt;1. &lt;strong&gt;并行度优化（Parallelism Optimization）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;并行度优化是指将计算任务拆分成多个独立的子任务，利用多核处理器或多台机器的计算能力来加速计算过程。并行度优化主要关注如何高效地将任务分解并利用多个计算资源。&lt;/p&gt;
&lt;h4 id=&#34;核心策略&#34;&gt;核心策略：
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;任务划分&lt;/strong&gt;：将计算任务划分为多个相对独立的子任务，确保每个子任务都能并行执行。划分可以基于数据分割或功能划分。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并行模型选择&lt;/strong&gt;：选择合适的并行编程模型，如多线程、分布式计算、SIMD（单指令多数据）等，依赖于硬件架构和应用的需求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;粒度控制&lt;/strong&gt;：控制任务的划分粒度，避免过多的细小任务带来的上下文切换开销。任务太小可能引发更多的线程启动和调度开销，反而会降低性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免线程同步问题&lt;/strong&gt;：在并行化时，尽量减少线程间的同步需求，如锁的竞争等，因为锁竞争会增加线程等待时间，影响性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实例&#34;&gt;实例：
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多核处理器利用&lt;/strong&gt;：将计算密集型任务分配给不同的 CPU 核心。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GPU 加速&lt;/strong&gt;：使用图形处理单元（GPU）进行并行计算，例如深度学习中广泛使用的并行训练。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-数据传输优化data-transfer-optimization&#34;&gt;2. &lt;strong&gt;数据传输优化（Data Transfer Optimization）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;数据传输优化关注的是如何减少计算过程中数据的传输开销，尤其是在多核、多节点或大规模并行计算环境中，数据传输的延迟和带宽限制可能成为性能瓶颈。&lt;/p&gt;
&lt;h4 id=&#34;核心策略-1&#34;&gt;核心策略：
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;减少数据传输量&lt;/strong&gt;：尽量减少进程之间、计算节点之间的通信量。可以通过局部计算、减少数据的复制或压缩数据传输来减少带宽消耗。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据预取&lt;/strong&gt;：根据访问模式预测数据的需求，提前加载数据到缓存中，从而减少等待时间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存映射与共享内存&lt;/strong&gt;：使用共享内存或内存映射文件来避免频繁的进程间通信，特别是在多进程或多线程的应用程序中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;局部性优化&lt;/strong&gt;：将数据分配到物理内存的本地区域，减少跨节点或跨芯片的数据传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实例-1&#34;&gt;实例：
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在多节点集群中，避免每次计算都从主存储器加载大量数据，而是通过缓存和局部数据共享来减少传输。&lt;/li&gt;
&lt;li&gt;在 GPU 和 CPU 之间，使用较小的批次数据传输，以减少 GPU 与主机之间的通信开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-存储器访问优化memory-access-optimization&#34;&gt;3. &lt;strong&gt;存储器访问优化（Memory Access Optimization）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;存储器访问优化主要目的是减少内存访问延迟，提高内存带宽的利用率。内存访问模式的不合理会造成严重的性能瓶颈，尤其是对于大规模数据的计算密集型任务。&lt;/p&gt;
&lt;h4 id=&#34;核心策略-2&#34;&gt;核心策略：
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据局部性优化&lt;/strong&gt;：通过优化数据访问模式，提高数据在缓存中的命中率。可分为&lt;strong&gt;时间局部性&lt;/strong&gt;（重复访问相同数据）和&lt;strong&gt;空间局部性&lt;/strong&gt;（访问数据时的空间邻近性）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存优化&lt;/strong&gt;：优化程序数据结构，使数据在缓存中更容易命中，从而减少访问主内存的次数。使用&lt;strong&gt;预取技术&lt;/strong&gt;和合理的&lt;strong&gt;缓存对齐&lt;/strong&gt;可以显著提高缓存命中率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免不必要的内存访问&lt;/strong&gt;：减少冗余的内存访问，如不必要的内存复制或多次访问相同的数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非一致性存储模型优化&lt;/strong&gt;：在多处理器系统中，保持各个缓存一致性可能导致额外的开销，优化缓存一致性协议和访问策略可以提升性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实例-2&#34;&gt;实例：
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;优化矩阵运算时，按行或按列的顺序访问数据，以提高缓存命中率。&lt;/li&gt;
&lt;li&gt;使用 &lt;strong&gt;NUMA&lt;/strong&gt;（Non-Uniform Memory Access）架构时，避免频繁地访问远程内存，尽量保持计算和数据存储在同一个节点的本地内存中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-向量化优化vectorization-optimization&#34;&gt;4. &lt;strong&gt;向量化优化（Vectorization Optimization）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;向量化是指将标量操作转换为向量操作，在单条指令中处理多个数据元素。现代处理器，尤其是具有SIMD（单指令多数据）指令集的处理器，能够通过向量化提升计算效率。&lt;/p&gt;
&lt;h4 id=&#34;核心策略-3&#34;&gt;核心策略：
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;利用SIMD指令&lt;/strong&gt;：使用 SIMD 指令集（如 AVX、SSE、NEON 等）对数据进行向量化操作，在单个指令周期内处理多个数据元素。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编译器自动向量化&lt;/strong&gt;：现代编译器（如 GCC、Clang、Intel Compiler）能够自动识别可以向量化的循环，并进行相应优化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;手动优化&lt;/strong&gt;：在一些复杂的场景中，可以手动编写 SIMD 代码，通过内联汇编或编写特定的 SIMD 库来实现向量化优化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据对齐&lt;/strong&gt;：确保数据存储在合适的内存地址对齐，以便在向量化时避免额外的开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实例-3&#34;&gt;实例：
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在图像处理、科学计算等应用中，使用 SIMD 向量化技术对每个像素或数据点执行并行操作（如加法、乘法等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-负载均衡优化load-balancing-optimization&#34;&gt;5. &lt;strong&gt;负载均衡优化（Load Balancing Optimization）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;负载均衡优化是指在多处理器、多核心或分布式系统中，合理分配计算任务，以避免某些处理器过载或闲置，从而提高计算资源的利用率。&lt;/p&gt;
&lt;h4 id=&#34;核心策略-4&#34;&gt;核心策略：
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;任务划分&lt;/strong&gt;：合理划分任务，将计算负载均匀地分配给不同的计算单元。划分粒度要合适，避免过细的划分导致调度开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态负载均衡&lt;/strong&gt;：在运行时动态调整任务的分配，以应对负载变化和计算资源的不均衡。例如，在多核环境中，动态地将任务从负载较重的核心转移到空闲的核心上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据局部性和负载均衡的结合&lt;/strong&gt;：在多核或多节点环境中，除了考虑负载均衡，还要考虑任务和数据的局部性，避免数据传输引发的性能瓶颈。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实例-4&#34;&gt;实例：
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在分布式计算中使用负载均衡策略，避免某些计算节点过载，其他节点空闲。&lt;/li&gt;
&lt;li&gt;在多核处理器上，使用调度算法动态调整任务负载。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-多线程扩展性优化multithreading-scalability-optimization&#34;&gt;6. &lt;strong&gt;多线程扩展性优化（Multithreading Scalability Optimization）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;多线程扩展性优化关注的是如何使程序在多核或多处理器系统上运行时能够保持良好的性能提升，尤其是在线程数增加时，如何避免性能的下降。&lt;/p&gt;
&lt;h4 id=&#34;核心策略-5&#34;&gt;核心策略：
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免线程竞争&lt;/strong&gt;：合理设计程序，减少线程间的资源竞争。过多的锁、临界区和线程同步会导致线程间的阻塞，从而影响程序的扩展性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程数的调优&lt;/strong&gt;：选择合适的线程数，避免过多线程带来的上下文切换开销。通常，线程数不应超过处理器核心数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作窃取（Work Stealing）&lt;/strong&gt;：在多线程应用中，可以使用工作窃取算法，通过让空闲线程从负载较重的线程中窃取任务，平衡负载，提升扩展性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;任务划分粒度&lt;/strong&gt;：避免过小或过大的任务粒度，过小的任务会增加线程调度开销，过大的任务则可能导致资源利用率不足。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实例-5&#34;&gt;实例：
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在多核机器上，动态调整线程数，以适应任务的计算需求和机器的硬件能力。&lt;/li&gt;
&lt;li&gt;在并行计算中，使用线程池和任务队列来有效管理线程的创建和销毁。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;环境模拟&#34;&gt;环境模拟
&lt;/h2&gt;&lt;h3 id=&#34;docker&#34;&gt;docker
&lt;/h3&gt;&lt;h3 id=&#34;qemu&#34;&gt;qemu
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.qemu.org/documentation/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;docs&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;qemu安装arm&#34;&gt;qemu安装ARM
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/benkaoya/article/details/129509269&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;QEMU启动ARM64 Linux内核&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;大致思路是：
&lt;ul&gt;
&lt;li&gt;安装qemu-system-aarch64（ARM-64bit）模拟器；&lt;/li&gt;
&lt;li&gt;安装aarch64-linux-gnu（ARM-64bit）交叉编译器；&lt;/li&gt;
&lt;li&gt;交叉编译linux源码，得到ARM64 Linux内核镜像；&lt;/li&gt;
&lt;li&gt;交叉编译busybox源码，使用busybox制作initramfs；&lt;/li&gt;
&lt;li&gt;最后使用qemu-system-aarch64启用ARM64 Linux内核；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;环境管理运维&#34;&gt;环境管理/运维
&lt;/h2&gt;&lt;h3 id=&#34;微服务&#34;&gt;微服务
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;k8s&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;python&#34;&gt;python
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;conda&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他&#34;&gt;其他
&lt;/h2&gt;&lt;h3 id=&#34;内容比较compare&#34;&gt;内容比较compare
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.52pojie.cn/thread-1945905-1-1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Beyond Compare&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;代码调用关系&#34;&gt;代码调用关系
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;cflow：静态分析工具，用来生成 C/C++ 程序的调用图。&lt;/li&gt;
&lt;li&gt;Callgrind：动态函数分析&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>

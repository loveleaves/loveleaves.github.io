<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>C&#43;&#43; on 安哲睿</title>
        <link>https://loveleaves.github.io/categories/c&#43;&#43;/</link>
        <description>Recent content in C&#43;&#43; on 安哲睿</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Andrew Stark</copyright>
        <lastBuildDate>Thu, 13 Feb 2025 22:35:13 +0800</lastBuildDate><atom:link href="https://loveleaves.github.io/categories/c++/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>【编程语言】 C&#43;&#43;高级特性及实战</title>
        <link>https://loveleaves.github.io/p/c_plus_plus/</link>
        <pubDate>Thu, 09 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://loveleaves.github.io/p/c_plus_plus/</guid>
        <description>&lt;h2 id=&#34;references&#34;&gt;References
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/parallel101/cppguidebook&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;现代 C++ 大典&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://web.stanford.edu/class/archive/cs/cs106b/cs106b.1252/schedule.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cs106b&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/chenlong_cxy/article/details/127166206&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;C++知识总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/cpp/cpp/cpp-language-reference?view=msvc-170&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;C++ 语言参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;优秀开源&#34;&gt;优秀开源
&lt;/h2&gt;&lt;h3 id=&#34;abseil&#34;&gt;Abseil
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Abseil 是一个由 Google 开源的 C++/python 库，提供了一组常用的工具和基础设施，用于补充 C++ 标准库中缺失的功能或提高效率。&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/abseil/abseil-cpp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;abseil-cpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dlib&#34;&gt;Dlib
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Dlib 是一个流行的 C++ 库，主要用于机器学习、计算机视觉和图像处理。它提供了丰富的机器学习功能，支持多种算法和优化方法。&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/davisking/dlib&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;dlib&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;xgboost&#34;&gt;XGBoost
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;XGBoost 是一个高效的机器学习库，特别适用于梯度提升决策树（GBDT）算法，广泛用于回归、分类和排序任务。&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/dmlc/xgboost&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;xgboost&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;googles-glog-google-logging-library&#34;&gt;Google&amp;rsquo;s glog (Google Logging Library)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;功能：glog 是一个 C++ 日志库，提供了强大的日志记录功能，包括日志级别（DEBUG、INFO、WARNING、ERROR 和 FATAL）、日志输出到文件、以及日志格式化。&lt;/li&gt;
&lt;li&gt;特点：简单易用，支持日志级别设置、日志输出的细粒度控制，还可以在生产环境中非常高效地记录日志。&lt;/li&gt;
&lt;li&gt;链接：&lt;a class=&#34;link&#34; href=&#34;https://github.com/google/glog&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;glog GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;spdlog&#34;&gt;spdlog
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;功能：spdlog 是一个非常快速的 C++ 日志库，旨在提供低延迟、高性能的日志记录功能。&lt;/li&gt;
&lt;li&gt;特点：spdlog 提供线程安全的日志记录支持，能够输出到控制台或文件，支持日志级别、日志格式等功能。&lt;/li&gt;
&lt;li&gt;链接：spdlog GitHub&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;folly-facebook-open-source-library&#34;&gt;folly (Facebook Open-source Library)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;功能：folly 是 Facebook 开发的一个 C++ 库，包含了许多高性能的组件和工具，适用于大规模系统的开发。它包括内存管理、并发、容器、算法、IO等多个方面的扩展。&lt;/li&gt;
&lt;li&gt;特点：folly 提供了大量与系统底层交互的工具，具有很高的性能，适用于对性能要求极高的应用。&lt;/li&gt;
&lt;li&gt;链接：&lt;a class=&#34;link&#34; href=&#34;https://github.com/facebook/folly&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;folly GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;boost&#34;&gt;Boost
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;功能：Boost 是一个广泛使用的 C++ 库集合，提供了许多扩展标准库的功能，包括智能指针、正则表达式、线程、文件系统、算法等。&lt;/li&gt;
&lt;li&gt;特点：Boost 提供了丰富的功能，经过多年的开发和优化，成为了 C++ 生态中非常重要的工具库之一。很多 C++ 标准库中的特性都源自 Boost（如 std::shared_ptr 和 std::filesystem）。&lt;/li&gt;
&lt;li&gt;链接：&lt;a class=&#34;link&#34; href=&#34;https://www.boost.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Boost官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fmt&#34;&gt;fmt
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;功能：fmt 是一个现代化的、快速的格式化库，提供了类似 Python 中的 f-string 或 C# 中的 string interpolation 的功能。&lt;/li&gt;
&lt;li&gt;特点：它允许开发者使用更加简洁和类型安全的方式进行字符串格式化。fmt 库的速度非常快，而且 API 设计符合现代 C++ 风格。&lt;/li&gt;
&lt;li&gt;链接：&lt;a class=&#34;link&#34; href=&#34;https://github.com/fmtlib/fmt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;fmt GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gflags&#34;&gt;gflags
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;功能：gflags 是一个 Google 提供的命令行参数解析库，广泛用于解析应用程序启动时的命令行选项。&lt;/li&gt;
&lt;li&gt;特点：gflags 提供了易于使用的命令行选项定义和管理功能，支持复杂的命令行解析需求，例如布尔值选项、枚举类型选项等。&lt;/li&gt;
&lt;li&gt;链接：&lt;a class=&#34;link&#34; href=&#34;https://github.com/gflags/gflags&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;gflags GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tbb-threading-building-blocks&#34;&gt;tbb (Threading Building Blocks)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;功能：tbb 是 Intel 提供的一个 C++ 并行编程库，旨在帮助开发者利用多核处理器，简化并行编程。&lt;/li&gt;
&lt;li&gt;特点：提供了线程池、并行算法和数据结构，能够方便地进行并行化计算，且通过自动负载平衡使多核资源得到高效利用。&lt;/li&gt;
&lt;li&gt;链接：&lt;a class=&#34;link&#34; href=&#34;https://github.com/oneapi-src/oneTBB&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TBB GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cppcoro&#34;&gt;cppcoro
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;功能：cppcoro 是一个支持 C++20 协程的 C++ 库，提供了多种并发控制结构，如 task 和 awaiter，用于协程的高效实现。&lt;/li&gt;
&lt;li&gt;特点：使 C++ 开发者能够高效地编写异步代码，同时保持代码简洁和易于理解。适合需要异步操作的场景。&lt;/li&gt;
&lt;li&gt;链接：&lt;a class=&#34;link&#34; href=&#34;https://github.com/lewissbaker/cppcoro&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cppcoro GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;eigen&#34;&gt;Eigen
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;功能：Eigen 是一个高效的 C++ 数学库，专门用于矩阵运算、线性代数和数值计算。&lt;/li&gt;
&lt;li&gt;特点：Eigen 提供了一个高性能的模板库，支持多维数组、矩阵操作以及高级的线性代数功能，广泛用于科学计算、机器学习等领域。&lt;/li&gt;
&lt;li&gt;链接：&lt;a class=&#34;link&#34; href=&#34;https://gitlab.com/libeigen/eigen&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Eigen GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c语言参考&#34;&gt;C++语言参考
&lt;/h2&gt;&lt;h3 id=&#34;类和结构class-and-struct&#34;&gt;类和结构（class and struct）
&lt;/h3&gt;&lt;h4 id=&#34;类成员&#34;&gt;类成员
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;override：重写父类虚函数&lt;/li&gt;
&lt;li&gt;final：表示一个虚函数不能被进一步重写，或者表示一个类不能被继承&lt;/li&gt;
&lt;li&gt;delete：禁用某个函数，如默认构造&lt;/li&gt;
&lt;li&gt;default：明确地请求编译器为类生成默认实现&lt;/li&gt;
&lt;li&gt;explicit：防止隐式转换调用其他函数&lt;/li&gt;
&lt;li&gt;纯虚函数：virtual void doStep() = 0; // 要求派生类必须实现，否则派生类也将变成抽象类，无法实例化。&lt;/li&gt;
&lt;li&gt;常成员函数const：只能调用其他常成员函数，不能修改成员变量（除mutable）&lt;/li&gt;
&lt;li&gt;static静态成员函数：不用实例化，可被直接调用&lt;/li&gt;
&lt;li&gt;inline：内联请求，将代码插入调用函数处，较少调用栈开销&lt;/li&gt;
&lt;li&gt;noexcept：表示该函数不会抛出异常&lt;/li&gt;
&lt;li&gt;mutable：修饰变量可在常成员函数中修改&lt;/li&gt;
&lt;li&gt;constexpr：表示该函数在编译时计算结果&lt;/li&gt;
&lt;li&gt;friend：友元函数/类，允许外部函数或类在需要时访问类的私有实现&lt;/li&gt;
&lt;li&gt;operator ：用于定义或重载类的运算符&lt;/li&gt;
&lt;li&gt;自定义迭代器类：通常需重载==、!=、++、*解引用，实现begin、end&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;对象生存期和资源管理-raii&#34;&gt;对象生存期和资源管理 (RAII)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;与托管语言不同，C++ 没有自动回收垃圾机制，易导致内存泄露&lt;/li&gt;
&lt;li&gt;善于利用析构特性进行自动内存回收管理，如std::lock_guard、Std::make_unique、Std::make_share等&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用于编译时封装的-pimpl&#34;&gt;用于编译时封装的 Pimpl
&lt;/h4&gt;&lt;p&gt;Pimpl（Pointer to Implementation）是一种设计模式，常用于C++编程中以隐藏类的实现细节。Pimpl模式通过将实现细节移到一个私有的实现类中，从而提高代码的可维护性、降低编译时间以及实现二进制兼容性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译依赖项的最小化。&lt;/li&gt;
&lt;li&gt;接口和实现的分离。&lt;/li&gt;
&lt;li&gt;可移植性。
一般实现：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// 头文件定义private类指针，源文件进行实现类impl
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// my_class.h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;class my_class {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   //  ... all public and protected stuff goes here ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;private:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   class impl; unique_ptr&amp;lt;impl&amp;gt; pimpl; // opaque type here
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;匿名函数-lambda表达式&#34;&gt;匿名函数 lambda表达式
&lt;/h3&gt;&lt;h3 id=&#34;引用-reference&#34;&gt;引用 reference
&lt;/h3&gt;&lt;h3 id=&#34;指针&#34;&gt;指针
&lt;/h3&gt;&lt;h3 id=&#34;异常&#34;&gt;异常
&lt;/h3&gt;&lt;h3 id=&#34;模板-template&#34;&gt;模板 template
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;变长参数模板：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;template &amp;lt;typename... Modules&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  explicit Sequential(Modules &amp;amp;&amp;amp;...modules) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    modules_.reserve(sizeof...(Modules));
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    pushBack(std::forward&amp;lt;Modules&amp;gt;(modules)...);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  } // 递归展开，调用基础pushBack方法
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;完美转发：std::forward，保留原来值类型（左值/右值）&lt;/li&gt;
&lt;li&gt;std::optional&lt;T&gt;：处理可能为null等值情况&lt;/li&gt;
&lt;li&gt;std::enable_shared_from_this&lt;T&gt;：在对象的成员函数中获取指向自身的智能指针，增加对象的引用计数，确保对象在异步操作或回调过程中不会被销毁&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;stlstandard-template-library标准模板库&#34;&gt;STL（Standard Template Library，标准模板库）
&lt;/h2&gt;&lt;h3 id=&#34;容器containers&#34;&gt;容器（Containers）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;vector.reserve 和 resize&lt;/li&gt;
&lt;li&gt;Vecotr.emplace_back和push_back&lt;/li&gt;
&lt;li&gt;std::reference_wrapper&lt;T&gt;存储引用&lt;/li&gt;
&lt;li&gt;std::initializer_list&lt;T&gt; 轻量级初始化列表，不可修改;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;算法algorithms&#34;&gt;算法（Algorithms）
&lt;/h3&gt;&lt;h3 id=&#34;迭代器iterators&#34;&gt;迭代器（Iterators）
&lt;/h3&gt;&lt;h3 id=&#34;函数对象function-objects&#34;&gt;函数对象（Function Objects）
&lt;/h3&gt;</description>
        </item>
        
    </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Software_modeling on 安哲睿</title>
        <link>https://loveleaves.github.io/categories/software_modeling/</link>
        <description>Recent content in Software_modeling on 安哲睿</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Andrew Stark</copyright>
        <lastBuildDate>Thu, 13 Feb 2025 22:35:13 +0800</lastBuildDate><atom:link href="https://loveleaves.github.io/categories/software_modeling/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>【软件设计】 设计模式介绍</title>
        <link>https://loveleaves.github.io/p/design_pattern/</link>
        <pubDate>Sun, 09 Feb 2025 00:00:00 +0000</pubDate>
        
        <guid>https://loveleaves.github.io/p/design_pattern/</guid>
        <description>&lt;h2 id=&#34;设计模式简介&#34;&gt;设计模式简介
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;以下引用自&lt;a class=&#34;link&#34; href=&#34;https://www.runoob.com/design-pattern/design-pattern-intro.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;菜鸟教程&lt;/a&gt;、&lt;a class=&#34;link&#34; href=&#34;https://refactoringguru.cn/design-patterns&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;design pattern&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。&lt;/p&gt;
&lt;p&gt;设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。&lt;/p&gt;
&lt;h3 id=&#34;什么是-gof四人帮全拼-gang-of-four&#34;&gt;什么是 GOF（四人帮，全拼 Gang of Four）？
&lt;/h3&gt;&lt;p&gt;在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 &lt;strong&gt;Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）&lt;/strong&gt; 的书，该书首次提到了软件开发中设计模式的概念。&lt;/p&gt;
&lt;p&gt;四位作者合称 &lt;strong&gt;GOF（四人帮，全拼 Gang of Four）&lt;/strong&gt;。他们所提出的设计模式主要是基于以下的面向对象设计原则。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对接口编程而不是对实现编程。&lt;/li&gt;
&lt;li&gt;优先使用对象组合而不是继承。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设计模式之美-王争&#34;&gt;设计模式之美-王争
&lt;/h2&gt;&lt;h3 id=&#34;知识概览图&#34;&gt;知识概览图
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://loveleaves.github.io/imgs/design_pattern_1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;课程目录&#34;&gt;课程目录
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://loveleaves.github.io/imgs/design_pattern_2.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;文章导览&#34;&gt;文章导览
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;./INTRODUCTION.md&#34; &gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/160463.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;开篇词 | 一对一的设计与编码集训，让你告别没有成长的烂代码！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/160981.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;01 | 为什么说每个程序员都要尽早地学习并掌握设计模式相关知识？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/160985.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;02 | 从哪些维度评判代码质量的好坏？如何具备写出高质量代码的能力？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/160991.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;03 | 面向对象、设计原则、设计模式、编程规范、重构，这五者有何关系？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/161575.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;04 | 理论一：当谈论面向对象的时候，我们到底在谈论什么？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/161114.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;05 | 理论二：封装、抽象、继承、多态分别可以解决哪些编程问题？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/161587.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;06 | 理论三：面向对象相比面向过程有哪些优势？面向过程真的过时了吗？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/164907.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;07 | 理论四：哪些代码设计看似是面向对象，实际是面向过程的？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/165103.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;08 | 理论五：接口vs抽象类的区别？如何用普通的类模拟抽象类和接口？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/165114.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;09 | 理论六：为什么基于接口而非实现编程？有必要为每个类都定义接口吗？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/169593.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;10 | 理论七：为何说要多用组合少用继承？如何决定该用组合还是继承？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/169600.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;11 | 实战一（上）：业务开发常用的基于贫血模型的MVC架构违背OOP吗？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/169631.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;12 | 实战一（下）：如何利用基于充血模型的DDD开发一个虚拟钱包系统？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/171760.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;13 | 实战二（上）：如何对接口鉴权这样一个功能开发做面向对象分析？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/171767.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;14 | 实战二（下）：如何利用面向对象设计和编程开发接口鉴权功能？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/171771.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;15 | 理论一：对于单一职责原则，如何判定某个类的职责是否够“单一”？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/176075.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;16 | 理论二：如何做到“对扩展开放、修改关闭”？扩展和修改各指什么？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/177110.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;17 | 理论三：里式替换（LSP）跟多态有何区别？哪些代码违背了LSP？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/177442.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;18 | 理论四：接口隔离原则有哪三种应用？原则中的“接口”该如何理解？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/177444.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;19 | 理论五：控制反转、依赖反转、依赖注入，这三者有何区别和联系？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/177448.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;20 | 理论六：我为何说KISS、YAGNI原则看似简单，却经常被用错？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/179607.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;21 | 理论七：重复的代码就一定违背DRY吗？如何提高代码的复用性？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/179615.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;22 | 理论八：如何用迪米特法则（LOD）实现“高内聚、松耦合”？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/182001.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;23 | 实战一（上）：针对业务系统的开发，如何做需求分析和设计？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/183007.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;24 | 实战一（下）：如何实现一个遵从设计原则的积分兑换系统？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/179644.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;25 | 实战二（上）：针对非业务的通用框架开发，如何做需求分析和设计？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/179673.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;26 | 实战二（下）：如何实现一个支持各种统计规则的性能计数器？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/179679.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;27 | 理论一：什么情况下要重构？到底重构什么？又该如何重构？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/185684.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;28 | 理论二：为了保证重构不出错，有哪些非常能落地的技术手段？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/186691.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;29 | 理论三：什么是代码的可测试性？如何写出可测试性好的代码？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/187761.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;30 | 理论四：如何通过封装、抽象、模块化、中间层等解耦代码？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/188622.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;31 | 理论五：让你最快速地改善代码质量的20条编程规范（上）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/188857.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;32 | 理论五：让你最快速地改善代码质量的20条编程规范（中）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/188882.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;33 | 理论五：让你最快速地改善代码质量的20条编程规范（下）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/190979.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;34 | 实战一（上）：通过一段ID生成器代码，学习如何发现代码质量问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/191621.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;35 | 实战一（下）：手把手带你将ID生成器代码从“能用”重构为“好用”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/191642.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;36 | 实战二（上）：程序出错该返回啥？NULL、异常、错误码、空对象？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/191647.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;37 | 实战二（下）：重构ID生成器项目中各函数的异常处理代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/193093.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;38 | 总结回顾面向对象、设计原则、编程规范、重构技巧等知识点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/193221.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;39 | 运用学过的设计原则和思想完善之前讲的性能计数器项目（上）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/193555.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;40 | 运用学过的设计原则和思想完善之前讲的性能计数器项目（下）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/194035.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;41 | 单例模式（上）：为什么说支持懒加载的双重检测不比饿汉式更优？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/194068.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;42 | 单例模式（中）：我为什么不推荐使用单例模式？又有何替代方案？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/196790.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;43 | 单例模式（下）：如何设计实现一个集群环境下的分布式单例模式？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/197254.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;44 | 工厂模式（上）：我为什么说没事不要随便用工厂模式创建对象？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/198614.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;45 | 工厂模式（下）：如何设计实现一个Dependency Injection框架？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/199674.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;46 | 建造者模式：详解构造函数、set方法、建造者模式三种对象创建方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/200786.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;47 | 原型模式：如何最快速地clone一个HashMap散列表？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/201823.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;48 | 代理模式：代理在RPC、缓存、监控等场景中的应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/202786.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;49 | 桥接模式：如何实现支持不同类型和渠道的消息推送系统？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/204845.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;50 | 装饰器模式：通过剖析Java IO类库源码学习装饰器模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/205912.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;51 | 适配器模式：代理、适配器、桥接、装饰，这四个模式有何区别？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/206409.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;52 | 门面模式：如何设计合理的接口粒度以兼顾接口的易用性和通用性？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/207456.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;53 | 组合模式：如何设计实现支持递归遍历的文件系统目录树结构？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/208572.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;54 | 享元模式（上）：如何利用享元模式优化文本编辑器的内存占用？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/209343.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;55 | 享元模式（下）：剖析享元模式在Java Integer、String中的应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/210170.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;56 | 观察者模式（上）：详解各种应用场景下观察者模式的不同实现方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/211239.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;57 | 观察者模式（下）：如何实现一个异步非阻塞的EventBus框架？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/212049.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;58 | 模板模式（上）：剖析模板模式在JDK、Servlet、JUnit等中的应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/212802.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;59 | 模板模式（下）：模板模式与Callback回调函数有何区别和联系？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/214014.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;60 | 策略模式（上）：如何避免冗长的if-else/switch分支判断代码？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/215132.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;61 | 策略模式（下）：如何实现一个支持给不同大小文件排序的小程序？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/216278.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;62 | 职责链模式（上）：如何实现可灵活扩展算法的敏感信息过滤框架？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/217395.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;63 | 职责链模式（下）：框架中常用的过滤器、拦截器是如何实现的？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/218375.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;64 | 状态模式：游戏、工作流引擎中常用的状态机是如何实现的？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/219290.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;65 | 迭代器模式（上）：相比直接遍历集合数据，使用迭代器有哪些优势？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/219964.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;66 | 迭代器模式（中）：遍历集合的同时，为什么不能增删集合元素？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/221269.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;67 | 迭代器模式（下）：如何设计实现一个支持“快照”功能的iterator？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/221852.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;68 | 访问者模式（上）：手把手带你还原访问者模式诞生的思维过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/222762.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;69 | 访问者模式（下）：为什么支持双分派的语言不需要访问者模式？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/223947.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;70 | 备忘录模式：对于大对象的备份和恢复，如何优化内存和时间的消耗？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/224549.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;71 | 命令模式：如何利用命令模式实现一个手游后端架构？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/225904.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;72 | 解释器模式：如何设计实现一个自定义接口告警规则功能？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/226710.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;73 | 中介模式：什么时候用中介模式？什么时候用观察者模式？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/227452.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;74 | 总结回顾23种经典设计模式的原理、背后的思想、应用场景等&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/229157.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;75 | 在实际的项目开发中，如何避免过度设计？又如何避免设计不足？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/229996.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;76 |  开源实战一（上）：通过剖析Java JDK源码学习灵活应用设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/230708.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;77 | 开源实战一（下）：通过剖析Java JDK源码学习灵活应用设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/232061.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;78 | 开源实战二（上）：从Unix开源开发学习应对大型复杂项目开发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/232427.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;79 | 开源实战二（中）：从Unix开源开发学习应对大型复杂项目开发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/232687.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;80 | 开源实战二（下）：从Unix开源开发学习应对大型复杂项目开发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/233742.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;81 | 开源实战三（上）：借Google Guava学习发现和开发通用功能模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/234758.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;82 | 开源实战三（中）：剖析Google Guava中用到的几种设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/235334.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;83 | 开源实战三（下）：借Google Guava学习三大编程范式中的函数式编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/236935.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;84 | 开源实战四（上）：剖析Spring框架中蕴含的经典设计思想或原则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/237810.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;85 | 开源实战四（中）：剖析Spring框架中用来支持扩展的两种设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/238418.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;86 | 开源实战四（下）：总结Spring框架用到的11种设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/239239.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;87 | 开源实战五（上）：MyBatis如何权衡易用性、性能和灵活性？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/240147.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;88 | 开源实战五（中）：如何利用职责链与代理模式实现MyBatis Plugin？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/240971.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;89 | 开源实战五（下）：总结MyBatis框架中用到的10种设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/242314.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;90 | 项目实战一：设计实现一个支持各种算法的限流框架（分析）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/243175.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;91 | 项目实战一：设计实现一个支持各种算法的限流框架（设计）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/243961.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;92 | 项目实战一：设计实现一个支持各种算法的限流框架（实现）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/245022.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;93 | 项目实战二：设计实现一个通用的接口幂等框架（分析）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/245788.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;94 | 项目实战二：设计实现一个通用的接口幂等框架（设计）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/246379.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;95 | 项目实战二：设计实现一个通用的接口幂等框架（实现）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/247776.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;96 | 项目实战三：设计实现一个支持自定义规则的灰度发布组件（分析）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/248714.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;97  | 项目实战三：设计实现一个支持自定义规则的灰度发布组件（设计）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/249369.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;98 | 项目实战三：设计实现一个支持自定义规则的灰度发布组件（实现）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/250942.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;99 | 总结回顾：在实际软件开发中常用的设计思想、原则和模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/251930.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;100 | 如何将设计思想、原则、模式等理论知识应用到项目中？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/166698.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;加餐一 | 用一篇文章带你了解专栏中用到的所有Java语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/172690.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;加餐二 | 设计模式、重构、编程规范等相关书籍推荐&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/192789.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;春节特别加餐 | 王争：如何学习《设计模式之美》专栏？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/252937.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;加餐三 | 聊一聊Google是如何做Code Review的&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/254190.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;加餐四 | 聊一聊Google那些让我快速成长的地方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/255037.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;加餐五 | 听一听小争哥对Google工程师文化的解读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/255697.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;加餐六 | 什么才是所谓的编程能力？如何考察一个人的编程能力？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/256866.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;加餐七 | 基础学科的知识如何转化成实际的技术生产力？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/257513.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;加餐八 | 程序员怎么才能让自己走得更高、更远？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/258207.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;加餐九 | 作为面试官或候选人，如何面试或回答设计模式问题？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/259489.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;加餐十 | 如何接手一坨烂业务代码？如何在烂业务代码中成长？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/260184.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;结束语  | 聊一聊机遇、方向、能力、努力！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mvc和ddd&#34;&gt;MVC和DDD
&lt;/h2&gt;&lt;p&gt;两者对比：&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/169600.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;业务开发常用的基于贫血模型的MVC架构违背OOP吗&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;mvc&#34;&gt;MVC
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的&lt;strong&gt;分层开发&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.runoob.com/design-pattern/mvc-pattern.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.runoob.com/design-pattern/mvc-pattern.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;基于贫血模型的传统的开发模式，是一种彻彻底底的面向过程的编程风格&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ddd&#34;&gt;DDD
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;领域驱动设计（Domain Driven Design，简称DDD）&lt;/li&gt;
&lt;li&gt;基于充血模型的开发模式，面向对象编程风格&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软件建模&#34;&gt;软件建模
&lt;/h2&gt;&lt;h3 id=&#34;软件建模介绍&#34;&gt;软件建模介绍
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;将想法通过模型可视化地表达出来，方便记忆和进一步分析，方便团队/同事交流，口语交流容易失真。&lt;/li&gt;
&lt;li&gt;软件建模体现了软件设计的思想，在需求和实现之间架起了一座桥梁，通过模型指导软件系统的具体实现。&lt;/li&gt;
&lt;li&gt;模型并不是软件系统的一个完备表示，而是所研究系统的一种抽象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何进行软件建模&#34;&gt;如何进行软件建模
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;软件建模原则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、选择正确的模型，模型要与现实相联系&lt;/li&gt;
&lt;li&gt;2、从不同的视角，使用不同的模型去表示一个系统&lt;/li&gt;
&lt;li&gt;3、模型是抽象的，是选取系统某个最显著的特征并进行简化表示，因此需要通过不同的视角采用不同模型表示：
&lt;ul&gt;
&lt;li&gt;**外部视角：**对系统上下文或环境进行建模&lt;/li&gt;
&lt;li&gt;**交互视角：**对系统及其环境或者系统的构件之间的交互进行建模，建立用例模型&lt;/li&gt;
&lt;li&gt;**结构化视角：**对系统的组织或者系统所处理的数据的结构进行建模，建立静态模型&lt;/li&gt;
&lt;li&gt;**行为视角：**对系统的动态行为以及系统如何响应事件进行建模，建立动态模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件建模方法&#34;&gt;软件建模方法
&lt;/h3&gt;&lt;p&gt;在不同的领域和场景下有不同的软件建模方法，其各自的建模思想和采用的建模工具也不尽相同，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结构化方法（Structured Method）&lt;/li&gt;
&lt;li&gt;面向对象方法（Object Oriented Method）&lt;/li&gt;
&lt;li&gt;基于构件方法（Component Based Method）&lt;/li&gt;
&lt;li&gt;面向服务方法（Service Oriented Method）&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;面向对象软件建模方法&#34;&gt;面向对象软件建模方法
&lt;/h2&gt;&lt;h3 id=&#34;uml介绍&#34;&gt;UML介绍
&lt;/h3&gt;&lt;p&gt;UML：Unified Modeling Language（统一建模语言），是面向对象的软件建模工具，使用UML进行建模的作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以更好的理解问题&lt;/li&gt;
&lt;li&gt;可以及早的发现错误或者被遗漏的点&lt;/li&gt;
&lt;li&gt;可以更加方便的进行组员之间的沟通&lt;/li&gt;
&lt;li&gt;支持面向对象软件开发建模，可以更好的描述显示编程的情景。&lt;/li&gt;
&lt;li&gt;对于复杂的系统来说，如果概要模型做的好，那么整个系统的模型也就很清晰明了。
UML一共有10种图，可分为四大类：&lt;/li&gt;
&lt;li&gt;用例图&lt;/li&gt;
&lt;li&gt;静态图：类图、对象图、包图&lt;/li&gt;
&lt;li&gt;行为图：状态图、活动图、交互图，交互图分为序列图和协作图。&lt;/li&gt;
&lt;li&gt;实现图：部署图、构件图
主要包括4种关系:&lt;/li&gt;
&lt;li&gt;关联关系(association)&lt;/li&gt;
&lt;li&gt;依赖关系(dependency)&lt;/li&gt;
&lt;li&gt;泛化关系(generalization)&lt;/li&gt;
&lt;li&gt;实现关系(realization)
4种视角&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;references&#34;&gt;References
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV16E421T7hc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;UML实战教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://geek-docs.com/uml/uml-tutorials/t_lib_100_uml_index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;UML教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.uml.org.cn/oobject/201905152.asp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;UML2.5笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://oss0-cdn.changxianggu.com/book/chapter/5_9787111515548.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ＵＭＬ基础与建模实践教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tools&#34;&gt;Tools
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在线免费：draw.io&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;uml常用图介绍&#34;&gt;UML常用图介绍
&lt;/h3&gt;&lt;p&gt;假设用UML建模以下场景：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“机票订购系统是一个允许用户在线查询航班、购票、管理行程及退票的平台。系统区分了访客（未登录用户）与注册用户的功能权限：访客仅能浏览航班信息，而注册用户在登录后，还能进行购票、查看已购票以及退订操作。此外，系统内置了与外部信用评分系统的接口，该接口用于监控用户退票行为，若用户一个月内退票超过两次，其在信用评分系统中的等级会下调，信用等级过低时，系统将限制其继续购票。”&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用例图（Use Case Diagram）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用例图是用来描述客户的需求，从用户的角度描述系统的功能，并指出系统的执行者，强调谁在使用系统，系统执行者完成了哪些功能。用例图包括角色、用例和关系。
&lt;img src=&#34;https://loveleaves.github.io/imgs/uml_1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类图（Class Diagram）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用来展示系统中的类、类之间的关系（如继承、关联、聚合等）。适用于系统设计阶段，帮助开发人员理解系统的数据结构和类之间的关系。
&lt;img src=&#34;https://loveleaves.github.io/imgs/uml_2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;顺序图（时序图，sequence diagram）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述对象之间如何通过消息交互以完成特定任务。适用于详细设计阶段，用于展示操作的时间顺序。
&lt;img src=&#34;https://loveleaves.github.io/imgs/uml_3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;状态图（State Diagram）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述对象或系统在不同状态之间的转移和条件。适用于描述对象生命周期，特别是在系统的状态变化较为复杂时。
&lt;img src=&#34;https://loveleaves.github.io/imgs/uml_4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;活动图（Activity Diagram）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述工作流、业务流程或操作的顺序。适用于系统行为建模、业务流程建模等。
&lt;img src=&#34;https://loveleaves.github.io/imgs/uml_5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构件图（组件图, Component Diagram）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用来展示系统的物理组件及它们之间的依赖关系。适用于高层设计阶段，帮助理解系统的模块化结构。
&lt;img src=&#34;https://loveleaves.github.io/imgs/uml_6.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部署图（Deployment Diagram）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述系统的硬件架构及其部署情况，显示硬件节点、节点之间的通信和软件组件部署到硬件节点的情况。适用于系统部署和运维阶段。
&lt;img src=&#34;https://loveleaves.github.io/imgs/uml_7.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>

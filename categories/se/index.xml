<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>SE on 安哲睿</title>
        <link>https://loveleaves.github.io/categories/se/</link>
        <description>Recent content in SE on 安哲睿</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Andrew Stark</copyright>
        <lastBuildDate>Sun, 30 Mar 2025 15:47:37 +0800</lastBuildDate><atom:link href="https://loveleaves.github.io/categories/se/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>【SE】 分布式系统架构设计</title>
        <link>https://loveleaves.github.io/p/distributed_system/</link>
        <pubDate>Sat, 22 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://loveleaves.github.io/p/distributed_system/</guid>
        <description>&lt;h2 id=&#34;references&#34;&gt;References
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/7317170970946191397&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;分布式系统架构设计原理与实战：理解分布式系统的基本概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cloud.tencent.com/developer/article/1905374&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cloud.tencent.com/developer/article/1905374&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/375847349&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/375847349&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《Designing Data-Intensive Applications》，DDIA，设计数据密集型应用&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/DistSysCorp/ddia&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DDIA解读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6844903967701336078?searchId=20250330152955E40832434865ED232D4C&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;一文读懂分布式架构知识体系&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;背景介绍&#34;&gt;背景介绍
&lt;/h2&gt;&lt;p&gt;分布式系统是指由多个独立的计算机节点组成的系统，这些节点通过网络连接在一起，共同完成某个任务或提供某个服务。分布式系统具有高度的可扩展性、高度的可靠性和高度的性能。因此，分布式系统已经成为现代信息技术的核心技术之一，广泛应用于互联网、大数据、人工智能等领域。&lt;/p&gt;
&lt;p&gt;然而，分布式系统也面临着很多挑战，如数据一致性、故障容错、负载均衡等。为了解决这些问题，需要深入理解分布式系统的基本概念和原理，并学习和掌握一些高级的分布式算法和技术。&lt;/p&gt;
&lt;h3 id=&#34;分布式系统的发展历程&#34;&gt;分布式系统的发展历程
&lt;/h3&gt;&lt;p&gt;分布式系统的发展历程可以分为以下几个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于消息传递的分布式系统（1970年代）&lt;/li&gt;
&lt;li&gt;基于文件系统的分布式系统（1980年代）&lt;/li&gt;
&lt;li&gt;基于Web的分布式系统（1990年代）&lt;/li&gt;
&lt;li&gt;基于服务的分布式系统（2000年代）&lt;/li&gt;
&lt;li&gt;基于云计算的分布式系统（2010年代至今）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每个阶段都有其特点和代表性的系统，如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于消息传递的分布式系统：例如，ACTORS模型的系统。&lt;/li&gt;
&lt;li&gt;基于文件系统的分布式系统：例如，Andrew文件系统。&lt;/li&gt;
&lt;li&gt;基于Web的分布式系统：例如，Amazon的电子商务系统。&lt;/li&gt;
&lt;li&gt;基于服务的分布式系统：例如，微软的.NET框架。&lt;/li&gt;
&lt;li&gt;基于云计算的分布式系统：例如，阿里云、腾讯云、华为云等公有云服务。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;分布式系统的特点&#34;&gt;分布式系统的特点
&lt;/h3&gt;&lt;p&gt;分布式系统具有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式性：节点分布在不同的计算机上，通过网络连接在一起。&lt;/li&gt;
&lt;li&gt;并发性：多个节点可以同时执行任务，实现并行处理。&lt;/li&gt;
&lt;li&gt;异步性：节点之间的通信可能存在延迟，需要处理异步问题。&lt;/li&gt;
&lt;li&gt;故障性：单个节点的故障不会导致整个系统的宕机。&lt;/li&gt;
&lt;li&gt;扩展性：通过增加节点，可以实现系统的扩展。&lt;/li&gt;
&lt;li&gt;数据一致性：在分布式环境下，多个节点共享和修改同一份数据，需要保证数据的一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分布式系统的分类&#34;&gt;分布式系统的分类
&lt;/h3&gt;&lt;p&gt;分布式系统可以分为以下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步分布式系统：所有节点需要同时执行任务，实现并行处理。&lt;/li&gt;
&lt;li&gt;异步分布式系统：节点之间可以自由地发送和接收消息，不需要同步。&lt;/li&gt;
&lt;li&gt;有状态分布式系统：节点之间可以共享和修改状态信息，实现状态同步。&lt;/li&gt;
&lt;li&gt;无状态分布式系统：节点之间不共享状态信息，实现无状态处理。&lt;/li&gt;
&lt;li&gt;集中式分布式系统：有一个中心节点负责协调和管理其他节点，实现集中式控制。&lt;/li&gt;
&lt;li&gt;去中心化分布式系统：没有中心节点，所有节点相互交互，实现去中心化管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;核心概念与联系&#34;&gt;核心概念与联系
&lt;/h2&gt;&lt;p&gt;在分布式系统中，有一些核心概念需要理解，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点（Node）：分布式系统中的基本组成单元。&lt;/li&gt;
&lt;li&gt;网络（Network）：节点之间的连接。&lt;/li&gt;
&lt;li&gt;通信（Communication）：节点之间的数据交换。&lt;/li&gt;
&lt;li&gt;一致性（Consistency）：多个节点共享和修改同一份数据时，数据的一致性。&lt;/li&gt;
&lt;li&gt;故障容错（Fault Tolerance）：单个节点故障不会导致整个系统宕机。&lt;/li&gt;
&lt;li&gt;负载均衡（Load Balancing）：多个节点共同处理任务，实现资源利用率的均衡。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些概念之间存在一定的联系，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点通过网络进行通信，实现任务的分布和协同。&lt;/li&gt;
&lt;li&gt;通信是实现一致性和故障容错的关键。&lt;/li&gt;
&lt;li&gt;负载均衡是实现系统性能和扩展的关键。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;核心算法原理和实现流程&#34;&gt;核心算法原理和实现流程
&lt;/h2&gt;&lt;p&gt;在分布式系统中，有一些核心算法需要理解，如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一致性算法：例如，Paxos、Raft等。&lt;/li&gt;
&lt;li&gt;故障容错算法：例如，Chubby、ZooKeeper等。&lt;/li&gt;
&lt;li&gt;负载均衡算法：例如，Round-robin、Least-connections、Random等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;一致性算法&#34;&gt;一致性算法
&lt;/h3&gt;&lt;p&gt;一致性算法是用于实现数据一致性的算法，主要解决了分布式系统中多个节点共享和修改同一份数据时的一致性问题。&lt;/p&gt;
&lt;h4 id=&#34;paxos算法&#34;&gt;Paxos算法
&lt;/h4&gt;&lt;p&gt;Paxos算法是一种一致性算法，可以在不需要时间顺序一致性的前提下，实现强一致性。Paxos算法的核心思想是通过多轮投票和选举来实现节点之间的协同。&lt;/p&gt;
&lt;p&gt;Paxos算法的主要组成部分包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提案者（Proposer）：提出一个值进行决定。&lt;/li&gt;
&lt;li&gt;接受者（Acceptor）：接受提案者的提案，并进行投票。&lt;/li&gt;
&lt;li&gt;决策者（Learner）：收到多数接受者的支持，进行决策。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Paxos算法的具体操作步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提案者随机选择一个数字值，并向所有接受者发送提案。&lt;/li&gt;
&lt;li&gt;接受者收到提案后，如果当前没有多数接受者支持其他提案，则支持当前提案，并向提案者报告支持情况。&lt;/li&gt;
&lt;li&gt;提案者收到多数接受者的支持后，向决策者发送决策请求。&lt;/li&gt;
&lt;li&gt;决策者收到多数接受者的支持后，进行决策，并向所有节点广播决策结果。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;raft算法&#34;&gt;Raft算法
&lt;/h4&gt;&lt;p&gt;Raft算法是一种一致性算法，可以在有限的时间内实现强一致性。Raft算法的核心思想是通过选举来实现领导者的选举和数据复制。&lt;/p&gt;
&lt;p&gt;Raft算法的主要组成部分包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;领导者（Leader）：负责接收客户端请求，并向其他节点复制数据。&lt;/li&gt;
&lt;li&gt;追随者（Follower）：等待选举，如果成为领导者，则向其他节点复制数据。&lt;/li&gt;
&lt;li&gt;候选者（Candidate）：尝试成为领导者，通过选举来实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Raft算法的具体操作步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个节点随机选择一个领导者标识，并向其他节点发送请求加入集群。&lt;/li&gt;
&lt;li&gt;其他节点收到请求后，如果当前领导者已经存在，则将请求丢弃；如果当前领导者不存在，则将当前节点设置为候选者状态，并向其&lt;/li&gt;
&lt;li&gt;节点发送自己为候选者的请求。&lt;/li&gt;
&lt;li&gt;候选者收到多数节点的支持后，成为领导者，并向其他节点发送心跳消息。&lt;/li&gt;
&lt;li&gt;追随者收到领导者的心跳消息后，更新自己的领导者标识，并设置为追随者状态。&lt;/li&gt;
&lt;li&gt;客户端向领导者发送请求，领导者将请求广播给其他节点，并将数据复制到其他节点。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;数学模型公式&#34;&gt;数学模型公式
&lt;/h4&gt;&lt;p&gt;Paxos和Raft算法的数学模型公式如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
$$
n=3f+1n = 3f + 1n=3f+1
$$&lt;p&gt;
其中，n是节点数量，f是故障节点数量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
$$
n=3fn = 3fn=3f
$$&lt;p&gt;
其中，n是节点数量，f是故障节点数量。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;故障容错算法&#34;&gt;故障容错算法
&lt;/h3&gt;&lt;p&gt;故障容错算法是用于实现故障容错的算法，主要解决了分布式系统中单个节点故障不会导致整个系统宕机的问题。&lt;/p&gt;
&lt;h4 id=&#34;chubby算法&#34;&gt;Chubby算法
&lt;/h4&gt;&lt;p&gt;Chubby算法是一种故障容错算法，可以实现分布式系统中的共享锁和文件系统。Chubby算法的核心思想是通过集中式控制来实现故障容错。&lt;/p&gt;
&lt;p&gt;Chubby算法的主要组成部分包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主服务器（Master Server）：负责管理所有节点的状态。&lt;/li&gt;
&lt;li&gt;备份服务器（Backup Server）：负责备份主服务器的状态。&lt;/li&gt;
&lt;li&gt;客户端（Client）：与主服务器和备份服务器进行通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Chubby算法的具体操作步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端向主服务器发送请求，主服务器处理请求并返回结果。&lt;/li&gt;
&lt;li&gt;主服务器在处理请求时，可以将请求委托给备份服务器处理。&lt;/li&gt;
&lt;li&gt;主服务器和备份服务器之间通过心跳消息来实现故障检测和故障转移。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;zookeeper算法&#34;&gt;ZooKeeper算法
&lt;/h4&gt;&lt;p&gt;ZooKeeper算法是一种故障容错算法，可以实现分布式系统中的配置管理和集群管理。ZooKeeper算法的核心思想是通过多个服务器实现故障容错，并通过主备模式来实现高可用。&lt;/p&gt;
&lt;p&gt;ZooKeeper算法的主要组成部分包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主服务器（Leader）：负责处理客户端请求。&lt;/li&gt;
&lt;li&gt;备份服务器（Follower）：负责备份主服务器的状态。&lt;/li&gt;
&lt;li&gt;客户端（Client）：与主服务器和备份服务器进行通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ZooKeeper算法的具体操作步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端向主服务器发送请求，主服务器处理请求并返回结果。&lt;/li&gt;
&lt;li&gt;主服务器在处理请求时，可以将请求委托给备份服务器处理。&lt;/li&gt;
&lt;li&gt;主服务器和备份服务器之间通过心跳消息来实现故障检测和故障转移。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;数学模型公式-1&#34;&gt;数学模型公式
&lt;/h4&gt;&lt;p&gt;Chubby和ZooKeeper算法的数学模型公式如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
$$
n=3fn = 3fn=3f
$$&lt;p&gt;
其中，n是节点数量，f是故障节点数量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
$$
n=2f+1n = 2f + 1n=2f+1
$$&lt;p&gt;
其中，n是节点数量，f是故障节点数量。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;负载均衡算法&#34;&gt;负载均衡算法
&lt;/h3&gt;&lt;p&gt;负载均衡算法是用于实现系统性能和扩展的算法，主要解决了分布式系统中多个节点共同处理任务的问题。&lt;/p&gt;
&lt;h4 id=&#34;round-robin算法&#34;&gt;Round-robin算法
&lt;/h4&gt;&lt;p&gt;Round-robin算法是一种负载均衡算法，可以实现基于轮询的请求分发。Round-robin算法的核心思想是将请求按顺序分发给节点。&lt;/p&gt;
&lt;p&gt;Round-robin算法的具体操作步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个请求队列，将所有请求加入队列。&lt;/li&gt;
&lt;li&gt;从队列中取出第一个请求，将其分发给第一个节点处理。&lt;/li&gt;
&lt;li&gt;将请求队列中的下一个请求分发给第二个节点处理。&lt;/li&gt;
&lt;li&gt;重复步骤2和3，直到队列中的所有请求都被处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;least-connections算法&#34;&gt;Least-connections算法
&lt;/h4&gt;&lt;p&gt;Least-connections算法是一种负载均衡算法，可以实现基于最少连接数的请求分发。Least-connections算法的核心思想是将请求分发给连接数最少的节点。&lt;/p&gt;
&lt;p&gt;Least-connections算法的具体操作步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个节点状态表，记录每个节点的连接数。&lt;/li&gt;
&lt;li&gt;从节点状态表中选择连接数最少的节点，将请求分发给该节点处理。&lt;/li&gt;
&lt;li&gt;处理完请求后，更新节点状态表。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;random算法&#34;&gt;Random算法
&lt;/h4&gt;&lt;p&gt;Random算法是一种负载均衡算法，可以实现基于随机选择的请求分发。Random算法的核心思想是将请求随机分发给节点。&lt;/p&gt;
&lt;p&gt;Random算法的具体操作步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个请求队列，将所有请求加入队列。&lt;/li&gt;
&lt;li&gt;从队列中随机选择一个请求，将其分发给一个节点处理。&lt;/li&gt;
&lt;li&gt;重复步骤2，直到队列中的所有请求都被处理。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>【SE】 DDD领域驱动设计实战-分层架构</title>
        <link>https://loveleaves.github.io/p/se_ddd/</link>
        <pubDate>Mon, 10 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://loveleaves.github.io/p/se_ddd/</guid>
        <description>&lt;h2 id=&#34;references&#34;&gt;References
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://segmentfault.com/a/1190000045332157&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://segmentfault.com/a/1190000045332157&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《实现领域驱动设计》&lt;/li&gt;
&lt;li&gt;DDD分层架构：有效降低层与层之间的依赖&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/lisheng19870305/article/details/123332886&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MVC和DDD的对比&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/The_Art_of_Coding/blob/main/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/169600.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;实战一（上）：业务开发常用的基于贫血模型的MVC架构违背OOP吗？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/343388831&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/343388831&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/342826364&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/342826364&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ddd分层架构&#34;&gt;DDD分层架构
&lt;/h2&gt;&lt;h3 id=&#34;分层架构的基本原则&#34;&gt;分层架构的基本原则
&lt;/h3&gt;&lt;p&gt;每层只与位于其下方的层发生耦合。&lt;/p&gt;
&lt;h3 id=&#34;分层架构的分类&#34;&gt;分层架构的分类
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;严格分层架构(Strict Layers Architecture)
某层只能与其直接下层耦合，即我的奴隶的奴隶，不是我的奴隶。&lt;/li&gt;
&lt;li&gt;松散分层架构(Relaxed Layers Architecture)
允许任意上层与任意下层耦合。由于用户接口层和应用服务通常需要与基础设施打交道，许多系统都是该架构。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;较低层有时也可与较高层耦合，但只限于采用观察者 (Observer)模式或者调停者(Mediator)模式场景。&lt;/br&gt;
较低层绝不能直接访问较高层。例如，在使用调停者模式时，较高层可能实现了较低层的接口，然后将实现对象作为参数传递到较低层。当较低层调用该实现时， 它并不知道实现出自何处。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;分层架构演进&#34;&gt;分层架构演进
&lt;/h3&gt;&lt;h4 id=&#34;传统四层架构&#34;&gt;传统四层架构
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://loveleaves.github.io/imgs/SE/1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;将领域模型和业务逻辑分离出来，并减少对基础设施、用户界面甚至应用层逻辑的依赖，因为它们不属业务逻辑。将一个夏杂的系统分为不同的层，每层都应该具有良好的内聚性，并且只依赖于比其自身更低的层。&lt;/p&gt;
&lt;p&gt;传统分层架构的&lt;strong&gt;基础设施层&lt;/strong&gt;位于底层，持久化和消息机制便位于该层。
这里的消息包含&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MQ消息&lt;/li&gt;
&lt;li&gt;SMTP&lt;/li&gt;
&lt;li&gt;文本消息(SMS)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可将基础设施层中所有组件看作应用程序的低层服务，较高层与该层发生耦合以复用技术基础设施。即便如此，依然应&lt;code&gt;避免核心的领域模型对象与基础设施层直接耦合&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;改良版四层架构&#34;&gt;改良版四层架构
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;传统架构的缺陷&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DDD初创开发团队发现，将基础设施层放在最底层存在缺点，比如此时领域层中的一些技术实现就很困难：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;违背分层架构的基本原则&lt;/li&gt;
&lt;li&gt;难以编写测试用例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;何解？
使用&lt;strong&gt;依赖反转设计原则&lt;/strong&gt;：低层服务（如基础设施层）应依赖高层组件（比如用户界面层、应用层和领域层）所提供的接口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;应用依赖反转原则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依赖反转原则后的分层方式：基础设施层在最上方，可实现所有其他层中定义的接口
&lt;img src=&#34;https://loveleaves.github.io/imgs/SE/2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;依赖反转原则真的可以支持所有层吗？&lt;/br&gt;
有人认为依赖反转原则中只存在两层：最上方和最下方，上层实现下层定义的抽象接口。因此上图的基础设施层将位于最上方，而用户接口层、应用层和领域层应作同层且都位于下方。对此大家可保留自己意见。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;各层职责&#34;&gt;各层职责
&lt;/h2&gt;&lt;h3 id=&#34;用户接口层&#34;&gt;用户接口层
&lt;/h3&gt;&lt;p&gt;一般包括用户接口、Web 服务等。&lt;/p&gt;
&lt;p&gt;只处理用户显示和用户请求，不应包含领域或业务逻辑。
有人认为，既然用户接口需验证用户输入，就无可避免应该包含业务逻辑。事实上，用户接口所进行的验证和对领域模型的验证不同：对那些粗制滥造且只面向领域模型的验证行为，应该予以限制。&lt;/p&gt;
&lt;p&gt;如果用户接口使用了领域模型中的对象，那么此时&lt;strong&gt;领域对象仅限于数据渲染展现&lt;/strong&gt;。在采用这种方式时，可使用展现模型对用户接口与领域对象进行解耦。&lt;/p&gt;
&lt;p&gt;由于用户可能是人，也可能是其他系统，有时用户接口层将采用开放主机服务的方式向外提供API。&lt;strong&gt;用户接口层是应用层的直接用户&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;用户接口层在于前后端调用的适配。若你的微服务要提供服务给很多外部应用，而对每个外部应用的入参出参都不同，你不可能开发一堆一对一的应用服务，这时Facade接口就起到了很好的作用，包括DO和DTO对象的组装和转换。&lt;/p&gt;
&lt;h3 id=&#34;应用层&#34;&gt;应用层
&lt;/h3&gt;&lt;p&gt;主要包含应用服务，理论上不应有业务规则或逻辑，而主要是面向用例和流程相关的操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用层位于领域层之上，因为领域层包含多个聚合，所以它可协调多个聚合服务和领域对象完成服务编排和组合，协作完成业务。&lt;/li&gt;
&lt;li&gt;应用层也是微服务间的交互通道，它可调用其它微服务，完成微服务间的服务组合和编排。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开发设计时，不要将本该放在领域层的业务逻辑放到应用层。因为&lt;strong&gt;庞大的应用层会使领域模型失焦，时间一长，微服务就会退化为MVC架构，导致业务逻辑混乱&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;应用服务是在应用层，负责&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务的组合、编排、转发、转换和传递，处理业务用例的执行顺序以及结果的拼装，以粗粒度服务通过API网关发布到前端&lt;/li&gt;
&lt;li&gt;安全认证&lt;/li&gt;
&lt;li&gt;权限校验&lt;/li&gt;
&lt;li&gt;事务控制&lt;/li&gt;
&lt;li&gt;发送或订阅领域事件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;领域层&#34;&gt;领域层
&lt;/h3&gt;&lt;p&gt;主要包含聚合根、实体、值对象、领域服务等领域模型中的领域对象。&lt;/p&gt;
&lt;p&gt;实现核心业务逻辑，通过各种校验保证业务正确性。领域层主要体现领域模型的业务能力，它用来表达业务概念、业务状态和业务规则。&lt;/p&gt;
&lt;p&gt;领域模型的业务逻辑主要由实体和领域服务实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实体采用充血模型 实现所有与之相关的业务功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实体和领域服务在实现业务逻辑上不是同级，当领域中的某些功能，单一实体或值对象无法实现，就会用到领域服务，它可组合聚合内的多个实体或值对象，实现复杂业务逻辑。&lt;/p&gt;
&lt;h3 id=&#34;基础层&#34;&gt;基础层
&lt;/h3&gt;&lt;p&gt;为其它各层提供通用技术基础服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三方工具&lt;/li&gt;
&lt;li&gt;驱动&lt;/li&gt;
&lt;li&gt;MQ&lt;/li&gt;
&lt;li&gt;API网关&lt;/li&gt;
&lt;li&gt;文件&lt;/li&gt;
&lt;li&gt;缓存&lt;/li&gt;
&lt;li&gt;DB&lt;/li&gt;
&lt;li&gt;最常用的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基础层包含基础服务，它采用依赖反转，封装基础资源服务，实现应用层、领域层与基础层解耦。&lt;/p&gt;
&lt;p&gt;MVC架构由于上层应用对DB强耦合，很多公司在架构演进最怕换DB，一旦更换，可能需重写一堆代码。
但采用依赖反转，应用层即可通过解耦保持独立核心业务逻辑。当DB变更，只需更换DB基础服务。&lt;/p&gt;
&lt;h2 id=&#34;微服务架构演进&#34;&gt;微服务架构演进
&lt;/h2&gt;&lt;p&gt;领域模型中对象的层次从内到外依次是：值对象、实体、聚合和限界上下文。&lt;/p&gt;
&lt;p&gt;实体或值对象的简单变更，一般不会让领域模型和微服务发生大变。但聚合的重组或拆分却可以。因为聚合内业务功能内聚，能独立完成特定业务。那聚合的重组或拆分，势必引起业务模块和系统功能变化。&lt;/p&gt;
&lt;p&gt;可以聚合为基础单元，完成领域模型和微服务架构的演进。
聚合可作为整体，在不同领域模型间重组或拆分，或直接将一个聚合独立为微服务。&lt;/p&gt;
&lt;h3 id=&#34;微服务架构的演进案例&#34;&gt;微服务架构的演进案例
&lt;/h3&gt;&lt;p&gt;现有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微服务 1：包含聚合 a、b、c&lt;/li&gt;
&lt;li&gt;微服务2：&lt;/li&gt;
&lt;li&gt;微服务3：包含聚合 d、e、f&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当发现微服务1中聚合a的功能经常被高频访问，以致拖累了整个微服务1的性能，可把聚合a，从微服务1中剥离，独立为微服务2以应对高性能场景&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;随业务发展，发现微服务3的领域模型变化，聚合d会更适合放到微服务1的领域模型。即可将聚合d整体迁移到微服务1。注意定义好聚合间的代码边界&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;架构演进后，微服务1从最初包含聚合a、b、c，演进为包含聚合b、c、d的新领域模型和微服务&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可见，好的聚合和代码模型的边界设计，可让你快速应对业务变化，轻松实现领域模型和微服务架构演进。&lt;/p&gt;
&lt;h3 id=&#34;微服务内服务的演进&#34;&gt;微服务内服务的演进
&lt;/h3&gt;&lt;p&gt;在微服务内部，实体的方法被领域服务组合和封装，领域服务又被应用服务组合和封装。在服务逐层组合和封装的过程中，你会发现这样一个有趣的现象。
&lt;img src=&#34;https://loveleaves.github.io/imgs/SE/3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;服务设计时，你并不一定能完整预测有哪些下层服务会被多少个上层服务组装，因此领域层通常只提供一些原子服务，比如领域服务a、b、c。但随系统功能增强和外部接入越来越多，应用服务不断丰富。终有一日，你会发现领域服务b和c同时多次被多个应用服务调用了，执行顺序也基本一致。这时你可以考虑将b和c合并，再将应用服务中b、c的功能下沉到领域层，演进为新的领域服务（b+c）。这样既减少了服务的数量，也减轻了上层服务组合和编排的复杂度。&lt;/p&gt;
&lt;p&gt;这就是服务演进，领域模型会越来越能适应需求快速变化。&lt;/p&gt;
&lt;h2 id=&#34;从mvc跨越到ddd&#34;&gt;从MVC跨越到DDD
&lt;/h2&gt;&lt;p&gt;由于层间松耦合，可专注本层设计，而不必关心其它层，也不必担心自己的设计会影响其它层。即DDD成功降低层与层之间的依赖。&lt;/p&gt;
&lt;p&gt;分层架构使得程序结构更清晰，升级和维护更容易。修改某层代码时，只要本层接口参数不变，其它层不必修改。即使本层接口发生变化，也只影响相邻的上层，修改工作量小且可控。&lt;/p&gt;
&lt;p&gt;传统企业应用大多是单体架构，而单体架构则大多是三层架构。三层架构解决了程序内代码间调用复杂、代码职责不清的问题，但这种分层是逻辑概念，在物理上它是中心化的集中式架构，并不适合分布式微服务架构。&lt;/p&gt;
&lt;p&gt;DDD分层要类似三层架构，只是在DDD中，这些要素被重新划分了层，确定了层与层之间的交互规则和职责边界。
&lt;img src=&#34;https://loveleaves.github.io/imgs/SE/4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;DDD分层架构相比MVC（只有API）在用户接口层新增了DTO，给前端提供了更多的可使用数据和更高的展示灵活性。&lt;/p&gt;
&lt;p&gt;DDD分层架构对三层架构的业务逻辑层进行了更清晰的划分，改善了三层架构核心业务逻辑混乱，代码改动相互影响大的情况。&lt;/p&gt;
&lt;p&gt;MVC架构向DDD分层架构演进，主要发生在业务逻辑层和数据访问层。
DDD分层架构将业务逻辑层的服务拆分到了应用层和领域层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用层快速响应前端的变化&lt;/li&gt;
&lt;li&gt;领域层实现领域模型的能力&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据访问层和基础层之间：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三层架构数据访问采用DAO方式&lt;/li&gt;
&lt;li&gt;DDD分层架构的数据库等基础资源访问，采用了仓储（Repository）设计模式，通过依赖倒置实现各层对基础资源的解耦。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;仓储本身属基础层，但考虑到一个聚合对应一个仓储，为了以后聚合代码整体迁移方便，在微服务代码目录设计时，在聚合目录下增加一个Repository的仓储目录，跟仓储相关的代码都在这个目录下。&lt;/br&gt;
这个目录下的代码与聚合的其它业务代码是分开的。如果未来换数据库，只需将Repository目录下的代码替换。而如果聚合需要整体迁移到其它微服务中去，仓储的代码也会一并迁移。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;仓储又分为两部分：仓储接口和仓储实现。仓储接口放在领域层中，仓储实现放在基础层。原来三层架构通用的第三方工具包、驱动、Common、Utility、Config等通用的公共的资源类统一放到了基础层。&lt;/p&gt;
&lt;p&gt;MVC 到 DDD 具体操作如下：&lt;/p&gt;
&lt;h3 id=&#34;抽象数据存储层&#34;&gt;抽象数据存储层
&lt;/h3&gt;&lt;p&gt;一般将Data Access层做抽象，降低系统对DB的直接依赖。
举个例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新建Account实体对象：一个实体（Entity）是拥有ID的域对象，除了拥有数据之外，同时拥有行为。Entity和数据库储存格式无关。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对象储存接口类AccountRepository：Repository只负责Entity对象的存储和读取，而Repository的实现类完成数据库存储的细节。通过加入Repository接口，底层数据库连接可以通过不同的实现类而替换。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>【SE】 消息中间件</title>
        <link>https://loveleaves.github.io/p/se_mq/</link>
        <pubDate>Mon, 10 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://loveleaves.github.io/p/se_mq/</guid>
        <description>&lt;h2 id=&#34;references&#34;&gt;References
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://segmentfault.com/a/1190000045395117&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://segmentfault.com/a/1190000045395117&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/zhaojinhui/p/16478549.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;消息中间件优缺点对比及选型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;概念&#34;&gt;概念
&lt;/h2&gt;&lt;h3 id=&#34;什么是中间件&#34;&gt;什么是中间件？
&lt;/h3&gt;&lt;p&gt;非底层操作系统软件，非业务应用软件，不是直接给最终用户使用的，不能直接给客户带来价值的软件统称为中间件。&lt;/p&gt;
&lt;h3 id=&#34;什么是消息中间件&#34;&gt;什么是消息中间件？
&lt;/h3&gt;&lt;p&gt;关注于数据的发送和接受，利用高效可靠的异步消息传递机制集成分布式系统。&lt;/p&gt;
&lt;h3 id=&#34;消息中间件的作用解耦并发削峰异步&#34;&gt;消息中间件的作用（解耦，并发，削峰，异步）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;可以在模块、服务、接口等不同粒度上实现解耦&lt;/li&gt;
&lt;li&gt;订阅/消费模式可以在数据粒度上解耦&lt;/li&gt;
&lt;li&gt;可提高系统的并发能力，集中力量办大事（同步部分），碎片时间做小时（异步部分）&lt;/li&gt;
&lt;li&gt;可提高系统可用性，因为缓冲了系统负载&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;消息中间件的弊端&#34;&gt;消息中间件的弊端
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;系统可用性降低：MQ宕机之后整套系统均不能正常使用，如果要保障队列可用，需要额外机制保障（双活或容灾）&lt;/li&gt;
&lt;li&gt;系统复杂性提高：存在消息重复消费、消息丢失、消息传递顺序不能保证的问题&lt;/li&gt;
&lt;li&gt;降低数据一致性：多个系统消费存在部分成功部分失败的问题，数据不一致了，如要保持强一致性，需要高代价的补偿（分布式事务，对账）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;重复消费：系统发了两条，两条都插入了数据库&lt;/br&gt;
消息丢失：系统根本没法请求到目标系统&lt;/br&gt;
一致性问题：系统要再ABC三个系统都执行成功之后才返回成功，结果AB成功了，C失败了&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;什么是消息队列message-queue简称mq&#34;&gt;什么是消息队列?（Message queue，简称MQ）
&lt;/h2&gt;&lt;p&gt;从字面理解就是一个保存消息的一个容器。那么我们为何需要这样一个容器呢？&lt;/p&gt;
&lt;p&gt;其实就是为了解耦各个系统，我们来举个例子：
&lt;img src=&#34;https://loveleaves.github.io/imgs/SE/5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;有这么一个简单的场景，系统A负责生成userID，并调用系统B、C。如果系统BC频繁变化是否需要userID参数，则系统A的代码就得不断变化，如果哪天又来了系统DEF……也需要这个参数，则系统A又要加入很多业务逻辑，这样子各他系统之间就容易产生相互影响，另外大量的系统与A发生交互也容易产生问题。
&lt;img src=&#34;https://loveleaves.github.io/imgs/SE/6.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;加了消息队列后，A只负责产生userID，至于谁要用这个参数，怎么用？系统A不管。对这个数据感兴趣的系统自己去取用即可，各个系统之间就实现了解耦。而且解耦后，整个服务业变成了一个异步的方式，系统A产生数据后，不用依次调用BCD来累计耗时，各系统可以同时来取用消息队列的数据进行处理，加大吞吐。&lt;/p&gt;
&lt;h3 id=&#34;消息队列的特点&#34;&gt;消息队列的特点
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;先进先出：消息队列的顺序在入队的时候就基本已经确定了，一般是不需人工干预的。&lt;/li&gt;
&lt;li&gt;发布订阅：发布订阅是一种很高效的处理方式，如果不发生阻塞，基本可以当成是同步操作。&lt;/li&gt;
&lt;li&gt;持久化：持久化确保消息队列的使用不只是一个部分场景的辅助工具，而是让消息队列能像数据库一样存储核心的数据。&lt;/li&gt;
&lt;li&gt;分布式：在现在大流量、大数据的使用场景下，支持分布式的部署，才能被广泛使用。消息队列的定位就是一个高性能的中间件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;消息队列的使用场景&#34;&gt;消息队列的使用场景
&lt;/h3&gt;&lt;p&gt;消息队列的使用场景有很多，最核心的有三个：解耦、异步、削峰&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解耦：一个系统或者一个模块，调用了多个系统或者模块，相互之间的调用很复杂，维护起来很麻烦。此时可以考虑使用消息队列来实现多个系统之间的解耦&lt;/li&gt;
&lt;li&gt;异步：系统A接受一个请求，需要在自己本地写库，还需要在系统BCD三个系统写库，同步操作比较费时。&lt;/li&gt;
&lt;li&gt;削峰：高峰时段系统接收到的请求缓存到消息队列，供系统根据负载慢慢消化&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如秒杀、发邮件、发短信、高并发订单等。&lt;/br&gt;
不适合的场景如银行转账、电信开户、第三方支付等。&lt;/br&gt;
关键还是要意识到队列的优劣点，然后分析场景是否使用。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;其他使用场景还有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最终一致性：先写消息再操作，例如&lt;strong&gt;预写日志&lt;/strong&gt;（Write Ahead Log，WAL）&lt;/li&gt;
&lt;li&gt;日志处理：比如 Kafka 的应用，解决&lt;strong&gt;海量日志&lt;/strong&gt;传输和缓冲的问题。&lt;/li&gt;
&lt;li&gt;消息通信：消息队列一般都内置了&lt;strong&gt;高效的通信机制&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mq的6种工作模式&#34;&gt;MQ的6种工作模式:
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;简单模式：一个生产者，一个消费者&lt;/li&gt;
&lt;li&gt;work模式：一个生产者，多个消费者，每个消费者获取到的消息唯一。&lt;/li&gt;
&lt;li&gt;发布/订阅模式（Pub/Sub）：一个生产者发送的消息会被多个消费者获取。&lt;/li&gt;
&lt;li&gt;路由模式：发送消息到交换机并且要指定路由key ，消费者将队列绑定到交换机时需要指定路由key&lt;/li&gt;
&lt;li&gt;topic模式：将路由键和某模式进行匹配，此时队列需要绑定在一个模式上，“#”匹配一个词或多个词，“*”只匹配一个词。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;消息队列常见问题&#34;&gt;消息队列常见问题
&lt;/h2&gt;&lt;h3 id=&#34;如何保证消息队列的高可用high-available-ha&#34;&gt;如何保证消息队列的高可用（High Available, HA）？
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;RabbitMQ&lt;/code&gt;&lt;strong&gt;基于主从的高可用&lt;/strong&gt;，分为单机模式、普通集群模式、镜像集群模式三种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通集群模式：多台服务器部署RabbitMQ，一个queue只会保存在一个节点上，其他节点只会同步该queue的元数据，当请求从其他节点获取该queue的数据时，该节点会再次去存储该queue的节点上拉取所需数据。这样就导致使用时要么固定使用其中一个节点，要么随机节点再需要的时候拉取数据。如果存放数据的节点宕机了，其他节点就无法拉取数据，如果开启了消息持久化让RabbitMQ落地存储消息就不一定会丢失消息，得等这个实例恢复后才能继续从这个queue拉取数据。&lt;/li&gt;
&lt;li&gt;镜像集群模式（&lt;strong&gt;高可用模式&lt;/strong&gt;）：创建的queue会同步到所有实例上来实现高可用。这样会带来同步数据的开销和扩展性降低（扩展机器会导致新增的机器同步queue增加更多同步数据的开销）；配置方式可通过控制台配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Kafka&lt;/code&gt;的高可用：&lt;strong&gt;分布式消息队列&lt;/strong&gt;
Kafka由多个broker组成，每个broker是一个节点，创建的一个topic划分为多个partition，每个partition可放在不同的broker上，每个partition只存放一部分数据。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>【SE/SA】 系统架构师/系统工程师介绍</title>
        <link>https://loveleaves.github.io/p/se_intro/</link>
        <pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://loveleaves.github.io/p/se_intro/</guid>
        <description>&lt;h2 id=&#34;references&#34;&gt;References
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.imooc.com/article/361234&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.imooc.com/article/361234&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_40610003/article/details/143609078&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/qq_40610003/article/details/143609078&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言
&lt;/h2&gt;&lt;p&gt;本文档全面介绍了系统架构师教程，涵盖了角色与职责、所需技能、职业发展路径以及架构设计原则和模式等内容，旨在帮助读者从入门到实践系统架构设计。文章还深入探讨了架构评估与优化策略，并提供了实际案例分析和常用工具介绍，帮助读者全面提升系统架构设计能力。&lt;/p&gt;
&lt;h2 id=&#34;介绍&#34;&gt;介绍
&lt;/h2&gt;&lt;p&gt;系统架构师（System Architect, SA, SAr）是软件开发团队中的关键角色，负责指导团队进行架构设计和实施。本文档从系统架构师的角色与职责开始，逐步深入到架构设计原则、评估与优化，以及实际案例分析，最后探讨如何通过实践和工具来提升架构设计能力。&lt;/p&gt;
&lt;h3 id=&#34;se和sa区别&#34;&gt;SE和SA区别
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;系统工程师SE：负责本版本系统分析与设计的所有活动，关注当前版本的所有需求，关注当前版本所有的技术方案，管理SE团队。&lt;/li&gt;
&lt;li&gt;架构师SA：负责本产品的架构设计和架构维护，关注影响架构的当前需求和未来需求，关注影响架构的技术方案，负责领域架构在当前版本的落地和产品架构的生命周期管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;角色与职责&#34;&gt;角色与职责
&lt;/h3&gt;&lt;p&gt;系统架构师的主要职责包括但不限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;架构设计：设计系统的整体框架，包括模块划分、组件间关系、数据流等。&lt;/li&gt;
&lt;li&gt;技术选型：根据业务需求和技术趋势选择合适的技术栈。&lt;/li&gt;
&lt;li&gt;性能优化：确保系统在高并发、大数据量等场景下仍能保持高效运行。&lt;/li&gt;
&lt;li&gt;安全性保障：确保系统的安全性，防止数据泄露等安全事件。&lt;/li&gt;
&lt;li&gt;团队领导：指导开发团队按照架构设计进行开发，并解决开发过程中遇到的技术难题。&lt;/li&gt;
&lt;li&gt;监控与维护：监控系统运行状态，及时发现并解决性能瓶颈等问题。&lt;/li&gt;
&lt;li&gt;用户反馈：与用户沟通，收集反馈，并根据用户反馈不断优化架构设计。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;需要掌握的技能&#34;&gt;需要掌握的技能
&lt;/h3&gt;&lt;p&gt;系统架构师需要掌握以下技能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编程语言：具备至少一种主流编程语言的深厚技术功底，如Java、Python、C#等。&lt;/li&gt;
&lt;li&gt;数据结构与算法：深入理解常用的数据结构（如数组、链表、树、图等）和算法（如排序、查找等）。&lt;/li&gt;
&lt;li&gt;计算机网络：掌握计算机网络基础知识，如TCP/IP协议、HTTP协议等。&lt;/li&gt;
&lt;li&gt;数据库技术：精通至少一种关系型数据库（如MySQL、Oracle）或非关系型数据库（如MongoDB）。&lt;/li&gt;
&lt;li&gt;操作系统：熟悉主流的操作系统（如Linux、Windows）和虚拟化技术。&lt;/li&gt;
&lt;li&gt;架构设计：理解常用的设计模式（如单例模式、工厂模式等）和架构模式（如微服务、SOA等）。&lt;/li&gt;
&lt;li&gt;性能优化：掌握常见的性能优化方法和技术。&lt;/li&gt;
&lt;li&gt;安全性：了解常见的安全漏洞和防护方法。&lt;/li&gt;
&lt;li&gt;DFX特性：可维可测可靠等。&lt;/li&gt;
&lt;li&gt;团队协作：具备良好的团队协作能力和沟通能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;职业发展路径&#34;&gt;职业发展路径
&lt;/h3&gt;&lt;p&gt;系统架构师的职业发展路径通常如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件工程师：从一个普通的软件工程师开始，逐步积累编程经验。&lt;/li&gt;
&lt;li&gt;高级工程师：通过不断学习和实践，成为公司内部的技术专家。&lt;/li&gt;
&lt;li&gt;系统架构师：在高级工程师的基础上，进一步提升自己的系统设计能力。&lt;/li&gt;
&lt;li&gt;技术总监：成为公司内部的技术决策者，负责整体技术方向和架构设计。&lt;/li&gt;
&lt;li&gt;CTO：成为公司的首席技术官，负责公司的技术战略和产品开发。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基础架构知识&#34;&gt;基础架构知识
&lt;/h2&gt;&lt;h3 id=&#34;架构设计原则与模式&#34;&gt;架构设计原则与模式
&lt;/h3&gt;&lt;h4 id=&#34;设计模式及其应用&#34;&gt;设计模式及其应用
&lt;/h4&gt;&lt;p&gt;设计模式是面向对象编程中的概念，用于解决特定问题的通用解决方案。常见的设计模式包括单例模式、工厂模式、观察者模式等。&lt;/p&gt;
&lt;h4 id=&#34;架构设计基本原则&#34;&gt;架构设计基本原则
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;KISS原则：保持简单，使系统易于理解和维护。&lt;/li&gt;
&lt;li&gt;YAGNI原则：避免过度设计，只实现当前需要的功能。&lt;/li&gt;
&lt;li&gt;DRY原则：不要重复自己，通过抽象和模块化减少代码冗余。&lt;/li&gt;
&lt;li&gt;单一职责原则：每个模块或类只负责一个功能，避免职责混杂。&lt;/li&gt;
&lt;li&gt;高内聚、低耦合：模块内部高度紧密，模块间弱耦合。&lt;/li&gt;
&lt;li&gt;面向接口编程：通过定义接口来解耦实现细节。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常见架构模式解析&#34;&gt;常见架构模式解析
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;微服务架构：将一个大型系统拆分成多个小型、相互独立的服务，每个服务负责一个特定的功能。&lt;/li&gt;
&lt;li&gt;SOA（面向服务的架构）：将系统组件抽象为服务，通过服务间的通信实现业务流程。&lt;/li&gt;
&lt;li&gt;事件驱动架构：通过事件触发系统组件的响应，适用于异步处理场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;架构设计中的常见问题及解决方案&#34;&gt;架构设计中的常见问题及解决方案
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题1：单点故障&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决方案：通过冗余设计和故障转移机制来解决单点故障问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题2：性能瓶颈&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决方案：通过性能测试找出性能瓶颈，并通过缓存、负载均衡等方式进行优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题3：安全性问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决方案：通过输入验证、权限管理和加密传输等方式来提高系统安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;架构评估与优化&#34;&gt;架构评估与优化
&lt;/h2&gt;&lt;h3 id=&#34;架构性能评估方法&#34;&gt;架构性能评估方法
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;性能测试：使用工具（如JMeter、LoadRunner）模拟不同负载下的系统性能。&lt;/li&gt;
&lt;li&gt;代码审查：检查代码中是否存在潜在的性能瓶颈。&lt;/li&gt;
&lt;li&gt;监控与日志：通过监控系统运行状态和分析日志来发现性能问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;架构安全性与可靠性考虑&#34;&gt;架构安全性与可靠性考虑
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安全性考虑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入验证：确保所有输入都经过验证，防止SQL注入、跨站脚本攻击等。&lt;/li&gt;
&lt;li&gt;权限管理：确保用户只能访问其权限范围内的资源。&lt;/li&gt;
&lt;li&gt;加密传输：使用SSL/TLS协议加密传输数据，防止数据被窃听。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可靠性考虑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冗余设计：通过冗余设计提高系统的可用性，如使用多副本存储数据。&lt;/li&gt;
&lt;li&gt;故障转移：在主服务不可用时自动切换到备用服务。&lt;/li&gt;
&lt;li&gt;容错处理：设计系统时考虑可能出现的异常情况，并提供相应的容错机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实际案例分析&#34;&gt;实际案例分析
&lt;/h2&gt;&lt;h3 id=&#34;典型系统架构案例解析&#34;&gt;典型系统架构案例解析
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;案例1：电商平台&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;架构设计：包括用户中心、订单中心、支付中心等模块。&lt;/li&gt;
&lt;li&gt;技术选型：使用Spring Boot进行后端开发，React进行前端开发，MySQL和Redis作为数据库和缓存。&lt;/li&gt;
&lt;li&gt;案例解析：通过微服务架构将大型系统拆分为多个小型服务，每个服务专注于一个特定功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;案例2：视频流媒体平台&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;架构设计：包括内容分发、视频编码、用户界面等模块。&lt;/li&gt;
&lt;li&gt;技术选型：使用Node.js进行后端开发，React Native进行前端开发，MongoDB和Elasticsearch作为数据库。&lt;/li&gt;
&lt;li&gt;案例解析：通过事件驱动架构实现异步处理，提高系统响应速度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;架构设计中的常见问题及解决方案-1&#34;&gt;架构设计中的常见问题及解决方案
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题1：单点故障&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决方案：通过冗余设计和故障转移机制来解决单点故障问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题2：性能瓶颈&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决方案：通过性能测试找出性能瓶颈，并通过缓存、负载均衡等方式进行优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题3：安全性问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决方案：通过输入验证、权限管理和加密传输等方式来提高系统安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;架构优化路径&#34;&gt;架构优化路径
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;电商平台&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过引入缓存机制来减少数据库查询压力。&lt;/li&gt;
&lt;li&gt;使用负载均衡来提高系统响应速度。&lt;/li&gt;
&lt;li&gt;通过事件驱动架构实现异步处理，减少阻塞等待时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;视频流媒体平台&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过使用CDN来提高内容分发速度。&lt;/li&gt;
&lt;li&gt;通过使用容器化部署来提高系统的灵活性和可扩展性。&lt;/li&gt;
&lt;li&gt;通过引入机器学习算法来优化视频编码效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实践与工具&#34;&gt;实践与工具
&lt;/h2&gt;&lt;h3 id=&#34;常用架构设计工具介绍&#34;&gt;常用架构设计工具介绍
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;架构设计工具：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visio：Microsoft提供的架构设计工具，支持多种图形设计。&lt;/li&gt;
&lt;li&gt;Archimate：支持架构建模语言，能够进行企业架构设计。&lt;/li&gt;
&lt;li&gt;Lucidchart：在线协作绘图工具，支持架构设计和流程图绘制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;架构设计的实践步骤&#34;&gt;架构设计的实践步骤
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;实践步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需求分析：与业务团队沟通，明确业务需求。&lt;/li&gt;
&lt;li&gt;技术选型：根据业务需求和技术趋势选择合适的技术栈。&lt;/li&gt;
&lt;li&gt;架构设计：设计系统的整体框架，包括模块划分、组件间关系等。&lt;/li&gt;
&lt;li&gt;系统实现：根据架构设计进行系统实现。&lt;/li&gt;
&lt;li&gt;测试与部署：进行性能测试、安全测试等，确保系统满足要求。&lt;/li&gt;
&lt;li&gt;运维监控：监控系统运行状态，不断优化架构设计。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何构建个人架构设计案例集&#34;&gt;如何构建个人架构设计案例集
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;构建案例集：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录设计过程：记录每次架构设计的过程，包括需求分析、技术选型、架构设计等。&lt;/li&gt;
&lt;li&gt;总结经验教训：总结每次设计中的经验教训，不断改进自己的设计能力。&lt;/li&gt;
&lt;li&gt;分享交流：通过博客、GitHub等渠道分享自己的设计经验，与他人交流学习。
记录设计过程示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 架构设计案例集
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;## 案例1：电商平台架构设计
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;### 需求分析
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- 用户中心：提供用户信息管理功能。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- 订单中心：处理订单创建、支付、发货等业务逻辑。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;### 技术选型
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- 后端：Spring Boot
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- 前端：React
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- 数据库：MySQL、Redis
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;### 架构设计
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- 微服务架构：将系统拆分为多个小型服务，每个服务专注于一个特定功能。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- 负载均衡：使用Nginx进行负载均衡，提高系统可用性。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;### 测试与部署
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- 性能测试：使用JMeter进行性能测试，确保系统满足性能要求。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- 安全测试：进行输入验证、权限管理等，确保系统安全性。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;### 运维监控
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- 监控系统运行状态，及时发现并解决性能瓶颈等问题。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- 使用ELK（Elasticsearch、Logstash、Kibana）进行日志监控。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过以上步骤，你可以构建出一个完整的个人架构设计案例集，记录自己的设计经验和心得，不断提升自己的架构设计能力。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>

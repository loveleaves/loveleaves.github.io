<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Distributed_system on 安哲睿</title>
        <link>https://loveleaves.github.io/categories/distributed_system/</link>
        <description>Recent content in Distributed_system on 安哲睿</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Andrew Stark</copyright>
        <lastBuildDate>Sun, 30 Mar 2025 15:47:37 +0800</lastBuildDate><atom:link href="https://loveleaves.github.io/categories/distributed_system/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>【SE】 分布式系统架构设计</title>
        <link>https://loveleaves.github.io/p/distributed_system/</link>
        <pubDate>Sat, 22 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://loveleaves.github.io/p/distributed_system/</guid>
        <description>&lt;h2 id=&#34;references&#34;&gt;References
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/7317170970946191397&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;分布式系统架构设计原理与实战：理解分布式系统的基本概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cloud.tencent.com/developer/article/1905374&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cloud.tencent.com/developer/article/1905374&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/375847349&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/375847349&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《Designing Data-Intensive Applications》，DDIA，设计数据密集型应用&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/DistSysCorp/ddia&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DDIA解读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6844903967701336078?searchId=20250330152955E40832434865ED232D4C&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;一文读懂分布式架构知识体系&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;背景介绍&#34;&gt;背景介绍
&lt;/h2&gt;&lt;p&gt;分布式系统是指由多个独立的计算机节点组成的系统，这些节点通过网络连接在一起，共同完成某个任务或提供某个服务。分布式系统具有高度的可扩展性、高度的可靠性和高度的性能。因此，分布式系统已经成为现代信息技术的核心技术之一，广泛应用于互联网、大数据、人工智能等领域。&lt;/p&gt;
&lt;p&gt;然而，分布式系统也面临着很多挑战，如数据一致性、故障容错、负载均衡等。为了解决这些问题，需要深入理解分布式系统的基本概念和原理，并学习和掌握一些高级的分布式算法和技术。&lt;/p&gt;
&lt;h3 id=&#34;分布式系统的发展历程&#34;&gt;分布式系统的发展历程
&lt;/h3&gt;&lt;p&gt;分布式系统的发展历程可以分为以下几个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于消息传递的分布式系统（1970年代）&lt;/li&gt;
&lt;li&gt;基于文件系统的分布式系统（1980年代）&lt;/li&gt;
&lt;li&gt;基于Web的分布式系统（1990年代）&lt;/li&gt;
&lt;li&gt;基于服务的分布式系统（2000年代）&lt;/li&gt;
&lt;li&gt;基于云计算的分布式系统（2010年代至今）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每个阶段都有其特点和代表性的系统，如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于消息传递的分布式系统：例如，ACTORS模型的系统。&lt;/li&gt;
&lt;li&gt;基于文件系统的分布式系统：例如，Andrew文件系统。&lt;/li&gt;
&lt;li&gt;基于Web的分布式系统：例如，Amazon的电子商务系统。&lt;/li&gt;
&lt;li&gt;基于服务的分布式系统：例如，微软的.NET框架。&lt;/li&gt;
&lt;li&gt;基于云计算的分布式系统：例如，阿里云、腾讯云、华为云等公有云服务。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;分布式系统的特点&#34;&gt;分布式系统的特点
&lt;/h3&gt;&lt;p&gt;分布式系统具有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式性：节点分布在不同的计算机上，通过网络连接在一起。&lt;/li&gt;
&lt;li&gt;并发性：多个节点可以同时执行任务，实现并行处理。&lt;/li&gt;
&lt;li&gt;异步性：节点之间的通信可能存在延迟，需要处理异步问题。&lt;/li&gt;
&lt;li&gt;故障性：单个节点的故障不会导致整个系统的宕机。&lt;/li&gt;
&lt;li&gt;扩展性：通过增加节点，可以实现系统的扩展。&lt;/li&gt;
&lt;li&gt;数据一致性：在分布式环境下，多个节点共享和修改同一份数据，需要保证数据的一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分布式系统的分类&#34;&gt;分布式系统的分类
&lt;/h3&gt;&lt;p&gt;分布式系统可以分为以下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步分布式系统：所有节点需要同时执行任务，实现并行处理。&lt;/li&gt;
&lt;li&gt;异步分布式系统：节点之间可以自由地发送和接收消息，不需要同步。&lt;/li&gt;
&lt;li&gt;有状态分布式系统：节点之间可以共享和修改状态信息，实现状态同步。&lt;/li&gt;
&lt;li&gt;无状态分布式系统：节点之间不共享状态信息，实现无状态处理。&lt;/li&gt;
&lt;li&gt;集中式分布式系统：有一个中心节点负责协调和管理其他节点，实现集中式控制。&lt;/li&gt;
&lt;li&gt;去中心化分布式系统：没有中心节点，所有节点相互交互，实现去中心化管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;核心概念与联系&#34;&gt;核心概念与联系
&lt;/h2&gt;&lt;p&gt;在分布式系统中，有一些核心概念需要理解，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点（Node）：分布式系统中的基本组成单元。&lt;/li&gt;
&lt;li&gt;网络（Network）：节点之间的连接。&lt;/li&gt;
&lt;li&gt;通信（Communication）：节点之间的数据交换。&lt;/li&gt;
&lt;li&gt;一致性（Consistency）：多个节点共享和修改同一份数据时，数据的一致性。&lt;/li&gt;
&lt;li&gt;故障容错（Fault Tolerance）：单个节点故障不会导致整个系统宕机。&lt;/li&gt;
&lt;li&gt;负载均衡（Load Balancing）：多个节点共同处理任务，实现资源利用率的均衡。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些概念之间存在一定的联系，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点通过网络进行通信，实现任务的分布和协同。&lt;/li&gt;
&lt;li&gt;通信是实现一致性和故障容错的关键。&lt;/li&gt;
&lt;li&gt;负载均衡是实现系统性能和扩展的关键。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;核心算法原理和实现流程&#34;&gt;核心算法原理和实现流程
&lt;/h2&gt;&lt;p&gt;在分布式系统中，有一些核心算法需要理解，如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一致性算法：例如，Paxos、Raft等。&lt;/li&gt;
&lt;li&gt;故障容错算法：例如，Chubby、ZooKeeper等。&lt;/li&gt;
&lt;li&gt;负载均衡算法：例如，Round-robin、Least-connections、Random等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;一致性算法&#34;&gt;一致性算法
&lt;/h3&gt;&lt;p&gt;一致性算法是用于实现数据一致性的算法，主要解决了分布式系统中多个节点共享和修改同一份数据时的一致性问题。&lt;/p&gt;
&lt;h4 id=&#34;paxos算法&#34;&gt;Paxos算法
&lt;/h4&gt;&lt;p&gt;Paxos算法是一种一致性算法，可以在不需要时间顺序一致性的前提下，实现强一致性。Paxos算法的核心思想是通过多轮投票和选举来实现节点之间的协同。&lt;/p&gt;
&lt;p&gt;Paxos算法的主要组成部分包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提案者（Proposer）：提出一个值进行决定。&lt;/li&gt;
&lt;li&gt;接受者（Acceptor）：接受提案者的提案，并进行投票。&lt;/li&gt;
&lt;li&gt;决策者（Learner）：收到多数接受者的支持，进行决策。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Paxos算法的具体操作步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提案者随机选择一个数字值，并向所有接受者发送提案。&lt;/li&gt;
&lt;li&gt;接受者收到提案后，如果当前没有多数接受者支持其他提案，则支持当前提案，并向提案者报告支持情况。&lt;/li&gt;
&lt;li&gt;提案者收到多数接受者的支持后，向决策者发送决策请求。&lt;/li&gt;
&lt;li&gt;决策者收到多数接受者的支持后，进行决策，并向所有节点广播决策结果。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;raft算法&#34;&gt;Raft算法
&lt;/h4&gt;&lt;p&gt;Raft算法是一种一致性算法，可以在有限的时间内实现强一致性。Raft算法的核心思想是通过选举来实现领导者的选举和数据复制。&lt;/p&gt;
&lt;p&gt;Raft算法的主要组成部分包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;领导者（Leader）：负责接收客户端请求，并向其他节点复制数据。&lt;/li&gt;
&lt;li&gt;追随者（Follower）：等待选举，如果成为领导者，则向其他节点复制数据。&lt;/li&gt;
&lt;li&gt;候选者（Candidate）：尝试成为领导者，通过选举来实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Raft算法的具体操作步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个节点随机选择一个领导者标识，并向其他节点发送请求加入集群。&lt;/li&gt;
&lt;li&gt;其他节点收到请求后，如果当前领导者已经存在，则将请求丢弃；如果当前领导者不存在，则将当前节点设置为候选者状态，并向其&lt;/li&gt;
&lt;li&gt;节点发送自己为候选者的请求。&lt;/li&gt;
&lt;li&gt;候选者收到多数节点的支持后，成为领导者，并向其他节点发送心跳消息。&lt;/li&gt;
&lt;li&gt;追随者收到领导者的心跳消息后，更新自己的领导者标识，并设置为追随者状态。&lt;/li&gt;
&lt;li&gt;客户端向领导者发送请求，领导者将请求广播给其他节点，并将数据复制到其他节点。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;数学模型公式&#34;&gt;数学模型公式
&lt;/h4&gt;&lt;p&gt;Paxos和Raft算法的数学模型公式如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
$$
n=3f+1n = 3f + 1n=3f+1
$$&lt;p&gt;
其中，n是节点数量，f是故障节点数量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
$$
n=3fn = 3fn=3f
$$&lt;p&gt;
其中，n是节点数量，f是故障节点数量。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;故障容错算法&#34;&gt;故障容错算法
&lt;/h3&gt;&lt;p&gt;故障容错算法是用于实现故障容错的算法，主要解决了分布式系统中单个节点故障不会导致整个系统宕机的问题。&lt;/p&gt;
&lt;h4 id=&#34;chubby算法&#34;&gt;Chubby算法
&lt;/h4&gt;&lt;p&gt;Chubby算法是一种故障容错算法，可以实现分布式系统中的共享锁和文件系统。Chubby算法的核心思想是通过集中式控制来实现故障容错。&lt;/p&gt;
&lt;p&gt;Chubby算法的主要组成部分包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主服务器（Master Server）：负责管理所有节点的状态。&lt;/li&gt;
&lt;li&gt;备份服务器（Backup Server）：负责备份主服务器的状态。&lt;/li&gt;
&lt;li&gt;客户端（Client）：与主服务器和备份服务器进行通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Chubby算法的具体操作步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端向主服务器发送请求，主服务器处理请求并返回结果。&lt;/li&gt;
&lt;li&gt;主服务器在处理请求时，可以将请求委托给备份服务器处理。&lt;/li&gt;
&lt;li&gt;主服务器和备份服务器之间通过心跳消息来实现故障检测和故障转移。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;zookeeper算法&#34;&gt;ZooKeeper算法
&lt;/h4&gt;&lt;p&gt;ZooKeeper算法是一种故障容错算法，可以实现分布式系统中的配置管理和集群管理。ZooKeeper算法的核心思想是通过多个服务器实现故障容错，并通过主备模式来实现高可用。&lt;/p&gt;
&lt;p&gt;ZooKeeper算法的主要组成部分包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主服务器（Leader）：负责处理客户端请求。&lt;/li&gt;
&lt;li&gt;备份服务器（Follower）：负责备份主服务器的状态。&lt;/li&gt;
&lt;li&gt;客户端（Client）：与主服务器和备份服务器进行通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ZooKeeper算法的具体操作步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端向主服务器发送请求，主服务器处理请求并返回结果。&lt;/li&gt;
&lt;li&gt;主服务器在处理请求时，可以将请求委托给备份服务器处理。&lt;/li&gt;
&lt;li&gt;主服务器和备份服务器之间通过心跳消息来实现故障检测和故障转移。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;数学模型公式-1&#34;&gt;数学模型公式
&lt;/h4&gt;&lt;p&gt;Chubby和ZooKeeper算法的数学模型公式如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
$$
n=3fn = 3fn=3f
$$&lt;p&gt;
其中，n是节点数量，f是故障节点数量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
$$
n=2f+1n = 2f + 1n=2f+1
$$&lt;p&gt;
其中，n是节点数量，f是故障节点数量。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;负载均衡算法&#34;&gt;负载均衡算法
&lt;/h3&gt;&lt;p&gt;负载均衡算法是用于实现系统性能和扩展的算法，主要解决了分布式系统中多个节点共同处理任务的问题。&lt;/p&gt;
&lt;h4 id=&#34;round-robin算法&#34;&gt;Round-robin算法
&lt;/h4&gt;&lt;p&gt;Round-robin算法是一种负载均衡算法，可以实现基于轮询的请求分发。Round-robin算法的核心思想是将请求按顺序分发给节点。&lt;/p&gt;
&lt;p&gt;Round-robin算法的具体操作步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个请求队列，将所有请求加入队列。&lt;/li&gt;
&lt;li&gt;从队列中取出第一个请求，将其分发给第一个节点处理。&lt;/li&gt;
&lt;li&gt;将请求队列中的下一个请求分发给第二个节点处理。&lt;/li&gt;
&lt;li&gt;重复步骤2和3，直到队列中的所有请求都被处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;least-connections算法&#34;&gt;Least-connections算法
&lt;/h4&gt;&lt;p&gt;Least-connections算法是一种负载均衡算法，可以实现基于最少连接数的请求分发。Least-connections算法的核心思想是将请求分发给连接数最少的节点。&lt;/p&gt;
&lt;p&gt;Least-connections算法的具体操作步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个节点状态表，记录每个节点的连接数。&lt;/li&gt;
&lt;li&gt;从节点状态表中选择连接数最少的节点，将请求分发给该节点处理。&lt;/li&gt;
&lt;li&gt;处理完请求后，更新节点状态表。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;random算法&#34;&gt;Random算法
&lt;/h4&gt;&lt;p&gt;Random算法是一种负载均衡算法，可以实现基于随机选择的请求分发。Random算法的核心思想是将请求随机分发给节点。&lt;/p&gt;
&lt;p&gt;Random算法的具体操作步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个请求队列，将所有请求加入队列。&lt;/li&gt;
&lt;li&gt;从队列中随机选择一个请求，将其分发给一个节点处理。&lt;/li&gt;
&lt;li&gt;重复步骤2，直到队列中的所有请求都被处理。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 安哲睿</title>
        <link>https://loveleaves.github.io/post/</link>
        <description>Recent content in Posts on 安哲睿</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Andrew Stark</copyright>
        <lastBuildDate>Sun, 09 Feb 2025 20:16:59 +0800</lastBuildDate><atom:link href="https://loveleaves.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>【软件设计】 设计模式介绍</title>
        <link>https://loveleaves.github.io/p/design_pattern/</link>
        <pubDate>Sun, 09 Feb 2025 00:00:00 +0000</pubDate>
        
        <guid>https://loveleaves.github.io/p/design_pattern/</guid>
        <description>&lt;h2 id=&#34;设计模式简介&#34;&gt;设计模式简介
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;以下引用自&lt;a class=&#34;link&#34; href=&#34;https://www.runoob.com/design-pattern/design-pattern-intro.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;菜鸟教程&lt;/a&gt;、&lt;a class=&#34;link&#34; href=&#34;https://refactoringguru.cn/design-patterns&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;design pattern&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。&lt;/p&gt;
&lt;p&gt;设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。&lt;/p&gt;
&lt;h3 id=&#34;什么是-gof四人帮全拼-gang-of-four&#34;&gt;什么是 GOF（四人帮，全拼 Gang of Four）？
&lt;/h3&gt;&lt;p&gt;在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 &lt;strong&gt;Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）&lt;/strong&gt; 的书，该书首次提到了软件开发中设计模式的概念。&lt;/p&gt;
&lt;p&gt;四位作者合称 &lt;strong&gt;GOF（四人帮，全拼 Gang of Four）&lt;/strong&gt;。他们所提出的设计模式主要是基于以下的面向对象设计原则。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对接口编程而不是对实现编程。&lt;/li&gt;
&lt;li&gt;优先使用对象组合而不是继承。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设计模式之美-王争&#34;&gt;设计模式之美-王争
&lt;/h2&gt;&lt;h3 id=&#34;知识概览图&#34;&gt;知识概览图
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://loveleaves.github.io/imgs/design_pattern_1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;课程目录&#34;&gt;课程目录
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://loveleaves.github.io/imgs/design_pattern_2.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;文章导览&#34;&gt;文章导览
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;./INTRODUCTION.md&#34; &gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/160463.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;开篇词 | 一对一的设计与编码集训，让你告别没有成长的烂代码！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/160981.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;01 | 为什么说每个程序员都要尽早地学习并掌握设计模式相关知识？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/160985.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;02 | 从哪些维度评判代码质量的好坏？如何具备写出高质量代码的能力？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/160991.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;03 | 面向对象、设计原则、设计模式、编程规范、重构，这五者有何关系？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/161575.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;04 | 理论一：当谈论面向对象的时候，我们到底在谈论什么？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/161114.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;05 | 理论二：封装、抽象、继承、多态分别可以解决哪些编程问题？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/161587.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;06 | 理论三：面向对象相比面向过程有哪些优势？面向过程真的过时了吗？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/164907.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;07 | 理论四：哪些代码设计看似是面向对象，实际是面向过程的？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/165103.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;08 | 理论五：接口vs抽象类的区别？如何用普通的类模拟抽象类和接口？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/165114.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;09 | 理论六：为什么基于接口而非实现编程？有必要为每个类都定义接口吗？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/169593.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;10 | 理论七：为何说要多用组合少用继承？如何决定该用组合还是继承？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/169600.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;11 | 实战一（上）：业务开发常用的基于贫血模型的MVC架构违背OOP吗？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/169631.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;12 | 实战一（下）：如何利用基于充血模型的DDD开发一个虚拟钱包系统？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/171760.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;13 | 实战二（上）：如何对接口鉴权这样一个功能开发做面向对象分析？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/171767.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;14 | 实战二（下）：如何利用面向对象设计和编程开发接口鉴权功能？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/171771.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;15 | 理论一：对于单一职责原则，如何判定某个类的职责是否够“单一”？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/176075.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;16 | 理论二：如何做到“对扩展开放、修改关闭”？扩展和修改各指什么？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/177110.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;17 | 理论三：里式替换（LSP）跟多态有何区别？哪些代码违背了LSP？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/177442.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;18 | 理论四：接口隔离原则有哪三种应用？原则中的“接口”该如何理解？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/177444.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;19 | 理论五：控制反转、依赖反转、依赖注入，这三者有何区别和联系？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/177448.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;20 | 理论六：我为何说KISS、YAGNI原则看似简单，却经常被用错？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/179607.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;21 | 理论七：重复的代码就一定违背DRY吗？如何提高代码的复用性？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/179615.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;22 | 理论八：如何用迪米特法则（LOD）实现“高内聚、松耦合”？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/182001.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;23 | 实战一（上）：针对业务系统的开发，如何做需求分析和设计？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/183007.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;24 | 实战一（下）：如何实现一个遵从设计原则的积分兑换系统？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/179644.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;25 | 实战二（上）：针对非业务的通用框架开发，如何做需求分析和设计？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/179673.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;26 | 实战二（下）：如何实现一个支持各种统计规则的性能计数器？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/179679.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;27 | 理论一：什么情况下要重构？到底重构什么？又该如何重构？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/185684.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;28 | 理论二：为了保证重构不出错，有哪些非常能落地的技术手段？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/186691.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;29 | 理论三：什么是代码的可测试性？如何写出可测试性好的代码？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/187761.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;30 | 理论四：如何通过封装、抽象、模块化、中间层等解耦代码？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/188622.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;31 | 理论五：让你最快速地改善代码质量的20条编程规范（上）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/188857.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;32 | 理论五：让你最快速地改善代码质量的20条编程规范（中）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/188882.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;33 | 理论五：让你最快速地改善代码质量的20条编程规范（下）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/190979.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;34 | 实战一（上）：通过一段ID生成器代码，学习如何发现代码质量问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/191621.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;35 | 实战一（下）：手把手带你将ID生成器代码从“能用”重构为“好用”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/191642.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;36 | 实战二（上）：程序出错该返回啥？NULL、异常、错误码、空对象？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/191647.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;37 | 实战二（下）：重构ID生成器项目中各函数的异常处理代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/193093.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;38 | 总结回顾面向对象、设计原则、编程规范、重构技巧等知识点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/193221.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;39 | 运用学过的设计原则和思想完善之前讲的性能计数器项目（上）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/193555.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;40 | 运用学过的设计原则和思想完善之前讲的性能计数器项目（下）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/194035.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;41 | 单例模式（上）：为什么说支持懒加载的双重检测不比饿汉式更优？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/194068.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;42 | 单例模式（中）：我为什么不推荐使用单例模式？又有何替代方案？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/196790.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;43 | 单例模式（下）：如何设计实现一个集群环境下的分布式单例模式？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/197254.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;44 | 工厂模式（上）：我为什么说没事不要随便用工厂模式创建对象？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/198614.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;45 | 工厂模式（下）：如何设计实现一个Dependency Injection框架？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/199674.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;46 | 建造者模式：详解构造函数、set方法、建造者模式三种对象创建方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/200786.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;47 | 原型模式：如何最快速地clone一个HashMap散列表？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/201823.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;48 | 代理模式：代理在RPC、缓存、监控等场景中的应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/202786.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;49 | 桥接模式：如何实现支持不同类型和渠道的消息推送系统？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/204845.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;50 | 装饰器模式：通过剖析Java IO类库源码学习装饰器模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/205912.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;51 | 适配器模式：代理、适配器、桥接、装饰，这四个模式有何区别？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/206409.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;52 | 门面模式：如何设计合理的接口粒度以兼顾接口的易用性和通用性？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/207456.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;53 | 组合模式：如何设计实现支持递归遍历的文件系统目录树结构？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/208572.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;54 | 享元模式（上）：如何利用享元模式优化文本编辑器的内存占用？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/209343.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;55 | 享元模式（下）：剖析享元模式在Java Integer、String中的应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/210170.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;56 | 观察者模式（上）：详解各种应用场景下观察者模式的不同实现方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/211239.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;57 | 观察者模式（下）：如何实现一个异步非阻塞的EventBus框架？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/212049.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;58 | 模板模式（上）：剖析模板模式在JDK、Servlet、JUnit等中的应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/212802.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;59 | 模板模式（下）：模板模式与Callback回调函数有何区别和联系？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/214014.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;60 | 策略模式（上）：如何避免冗长的if-else/switch分支判断代码？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/215132.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;61 | 策略模式（下）：如何实现一个支持给不同大小文件排序的小程序？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/216278.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;62 | 职责链模式（上）：如何实现可灵活扩展算法的敏感信息过滤框架？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/217395.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;63 | 职责链模式（下）：框架中常用的过滤器、拦截器是如何实现的？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/218375.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;64 | 状态模式：游戏、工作流引擎中常用的状态机是如何实现的？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/219290.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;65 | 迭代器模式（上）：相比直接遍历集合数据，使用迭代器有哪些优势？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/219964.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;66 | 迭代器模式（中）：遍历集合的同时，为什么不能增删集合元素？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/221269.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;67 | 迭代器模式（下）：如何设计实现一个支持“快照”功能的iterator？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/221852.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;68 | 访问者模式（上）：手把手带你还原访问者模式诞生的思维过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/222762.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;69 | 访问者模式（下）：为什么支持双分派的语言不需要访问者模式？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/223947.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;70 | 备忘录模式：对于大对象的备份和恢复，如何优化内存和时间的消耗？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/224549.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;71 | 命令模式：如何利用命令模式实现一个手游后端架构？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/225904.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;72 | 解释器模式：如何设计实现一个自定义接口告警规则功能？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/226710.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;73 | 中介模式：什么时候用中介模式？什么时候用观察者模式？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/227452.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;74 | 总结回顾23种经典设计模式的原理、背后的思想、应用场景等&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/229157.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;75 | 在实际的项目开发中，如何避免过度设计？又如何避免设计不足？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/229996.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;76 |  开源实战一（上）：通过剖析Java JDK源码学习灵活应用设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/230708.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;77 | 开源实战一（下）：通过剖析Java JDK源码学习灵活应用设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/232061.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;78 | 开源实战二（上）：从Unix开源开发学习应对大型复杂项目开发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/232427.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;79 | 开源实战二（中）：从Unix开源开发学习应对大型复杂项目开发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/232687.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;80 | 开源实战二（下）：从Unix开源开发学习应对大型复杂项目开发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/233742.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;81 | 开源实战三（上）：借Google Guava学习发现和开发通用功能模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/234758.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;82 | 开源实战三（中）：剖析Google Guava中用到的几种设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/235334.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;83 | 开源实战三（下）：借Google Guava学习三大编程范式中的函数式编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/236935.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;84 | 开源实战四（上）：剖析Spring框架中蕴含的经典设计思想或原则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/237810.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;85 | 开源实战四（中）：剖析Spring框架中用来支持扩展的两种设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/238418.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;86 | 开源实战四（下）：总结Spring框架用到的11种设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/239239.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;87 | 开源实战五（上）：MyBatis如何权衡易用性、性能和灵活性？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/240147.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;88 | 开源实战五（中）：如何利用职责链与代理模式实现MyBatis Plugin？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/240971.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;89 | 开源实战五（下）：总结MyBatis框架中用到的10种设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/242314.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;90 | 项目实战一：设计实现一个支持各种算法的限流框架（分析）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/243175.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;91 | 项目实战一：设计实现一个支持各种算法的限流框架（设计）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/243961.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;92 | 项目实战一：设计实现一个支持各种算法的限流框架（实现）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/245022.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;93 | 项目实战二：设计实现一个通用的接口幂等框架（分析）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/245788.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;94 | 项目实战二：设计实现一个通用的接口幂等框架（设计）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/246379.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;95 | 项目实战二：设计实现一个通用的接口幂等框架（实现）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/247776.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;96 | 项目实战三：设计实现一个支持自定义规则的灰度发布组件（分析）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/248714.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;97  | 项目实战三：设计实现一个支持自定义规则的灰度发布组件（设计）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/249369.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;98 | 项目实战三：设计实现一个支持自定义规则的灰度发布组件（实现）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/250942.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;99 | 总结回顾：在实际软件开发中常用的设计思想、原则和模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/251930.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;100 | 如何将设计思想、原则、模式等理论知识应用到项目中？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/166698.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;加餐一 | 用一篇文章带你了解专栏中用到的所有Java语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/172690.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;加餐二 | 设计模式、重构、编程规范等相关书籍推荐&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/192789.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;春节特别加餐 | 王争：如何学习《设计模式之美》专栏？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/252937.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;加餐三 | 聊一聊Google是如何做Code Review的&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/254190.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;加餐四 | 聊一聊Google那些让我快速成长的地方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/255037.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;加餐五 | 听一听小争哥对Google工程师文化的解读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/255697.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;加餐六 | 什么才是所谓的编程能力？如何考察一个人的编程能力？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/256866.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;加餐七 | 基础学科的知识如何转化成实际的技术生产力？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/257513.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;加餐八 | 程序员怎么才能让自己走得更高、更远？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/258207.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;加餐九 | 作为面试官或候选人，如何面试或回答设计模式问题？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/259489.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;加餐十 | 如何接手一坨烂业务代码？如何在烂业务代码中成长？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/260184.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;结束语  | 聊一聊机遇、方向、能力、努力！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mvc和ddd&#34;&gt;MVC和DDD
&lt;/h2&gt;&lt;p&gt;两者对比：&lt;a class=&#34;link&#34; href=&#34;https://github.com/loveleaves/design_pattern/blob/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%8E%8B%E4%BA%89/docs/169600.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;业务开发常用的基于贫血模型的MVC架构违背OOP吗&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;mvc&#34;&gt;MVC
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的&lt;strong&gt;分层开发&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.runoob.com/design-pattern/mvc-pattern.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.runoob.com/design-pattern/mvc-pattern.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;基于贫血模型的传统的开发模式，是一种彻彻底底的面向过程的编程风格&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ddd&#34;&gt;DDD
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;领域驱动设计（Domain Driven Design，简称DDD）&lt;/li&gt;
&lt;li&gt;基于充血模型的开发模式，面向对象编程风格&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;uml&#34;&gt;UML
&lt;/h2&gt;&lt;h3 id=&#34;uml介绍&#34;&gt;UML介绍
&lt;/h3&gt;&lt;p&gt;UML：Unified Modeling Language（统一建模语言），使用UML进行建模的作用有哪些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以更好的理解问题&lt;/li&gt;
&lt;li&gt;可以及早的发现错误或者被遗漏的点&lt;/li&gt;
&lt;li&gt;可以更加方便的进行组员之间的沟通&lt;/li&gt;
&lt;li&gt;支持面向对象软件开发建模，可以更好的描述显示编程的情景。&lt;/li&gt;
&lt;li&gt;对于复杂的系统来说，如果概要模型做的好，那么整个系统的模型也就很清晰明了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;references&#34;&gt;References
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://geek-docs.com/uml/uml-tutorials/t_lib_100_uml_index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;UML教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.uml.org.cn/oobject/201905152.asp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;UML2.5笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://oss0-cdn.changxianggu.com/book/chapter/5_9787111515548.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ＵＭＬ基础与建模实践教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tools&#34;&gt;Tools
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在线免费：https://www.processon.com/&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>【SIMD】 ARM SIMD指令集NEON等介绍</title>
        <link>https://loveleaves.github.io/p/arm-neon/</link>
        <pubDate>Thu, 06 Feb 2025 00:00:00 +0000</pubDate>
        
        <guid>https://loveleaves.github.io/p/arm-neon/</guid>
        <description>&lt;h1 id=&#34;arm-simd&#34;&gt;ARM SIMD
&lt;/h1&gt;&lt;p&gt;ARM平台基于ARM v7-A架构的ARM Cortex-A系列处理器(Cortex-A5, Cortex-A7,Cortex-A8, Cortex-A9, Cortex-A15)上的NEON加速：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对C/C++语言：循环展开等编译优化，-O2启用&lt;/li&gt;
&lt;li&gt;针对NEON intrinsics：NEOM SIMD C/C++语言接口，针对架构启用V向量扩展，选择浮点处理器和ABI（application Binary Interface）接口类型&lt;/li&gt;
&lt;li&gt;针对汇编语言：内联汇编，直接操作neon指令和寄存器
路线：了解相应编译优化=》使用intrinsic接口，学习对应汇编代码=》内联汇编，&lt;strong&gt;在编译器汇编代码基础上&lt;/strong&gt;（否则可能反优化）学习并优化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;references
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.arm.com/documentation/den0018/latest&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;NEON Programmer&amp;rsquo;s Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.arm.com/documentation/den0013/latest&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cortex-A Series Programmer&amp;rsquo;s Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;算子源码&#34;&gt;算子源码
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;AI算子：&lt;a class=&#34;link&#34; href=&#34;https://github.com/Tencent/ncnn/tree/master/src/layer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;腾讯ncnn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;数据处理算子：&lt;a class=&#34;link&#34; href=&#34;https://github.com/numpy/numpy/tree/main/numpy/_core/src/common/simd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;numpy simd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;图像处理算子：&lt;a class=&#34;link&#34; href=&#34;https://github.com/opencv/opencv/tree/master/3rdparty/carotene&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Nvidia carotene&lt;/a&gt;，OpenCV third party&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;理论学习&#34;&gt;理论学习
&lt;/h2&gt;&lt;h3 id=&#34;指令流水线&#34;&gt;指令流水线
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;经典的五级流水线模型&lt;/strong&gt;
&lt;img src=&#34;https://loveleaves.github.io/imgs/pipeline.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;pipeline&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;1、&lt;strong&gt;取指（IF）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以程序计数器（PC）中的内容作为地址，从存储器中取出指令并放入指令寄存器（IR）；&lt;/li&gt;
&lt;li&gt;PC值加4（假设每条指令占4字节），指向顺序的下一条指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、&lt;strong&gt;指令译码/读寄存器周期（ID）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对指令进行译码，并用IR中的寄存器地址去访问通用寄存器组，读出所需的操作数；&lt;/li&gt;
&lt;li&gt;对IR中的立即数进行扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、&lt;strong&gt;执行/有效地址计算周期（EX）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ALU对上一个周期中准备好的操作数进行运算或处理。在这个阶段，不同类型的指令进行的操作不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（1）load和store指令：ALB把指令中所指定的寄存器的内容与偏移量相加，形成访存有效地址；&lt;/li&gt;
&lt;li&gt;（2）寄存器-寄存器 ALU 指令：ALU按照操作码指定的操作对从通用寄存器组中读出的数据进行运算；&lt;/li&gt;
&lt;li&gt;（3）寄存器-立即数 ALU 指令：ALU按照操作码指定的操作对从通用寄存器组中读出的操作数和指令中给出的立即数进行运算；&lt;/li&gt;
&lt;li&gt;（4）分支指令：ALU把指令中给出的偏移量与PC值相加，形成转移目标的地址。同时，对在前一个周期读出的操作数进行判断，确定分支是否成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4、&lt;strong&gt;存储器访问/分支完成周期（MEM）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（1）load和store指令：load指令根据上一个周期计算出的有效地址从存储器中读出的相应的数据；store把指定的数据写入这个有效地址对应的存储单元。&lt;/li&gt;
&lt;li&gt;（2）分支指令：如果分支“成功”，就把前一个周期中计算好的转移目标地址送入PC。分支指令执行完成；否则，就不进行任何操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5、&lt;strong&gt;写回周期（WB）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把结果写入通用寄存器组。对于ALU运算来说，这个结果来自ALU，而对于load指令来说，这个结果来自存储器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;simd加速原理&#34;&gt;SIMD加速原理
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/QSCTech/zju-icicles/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E6%95%99%E6%9D%90/%E7%AC%AC5%E7%89%88/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%EF%BC%9A%E9%87%8F%E5%8C%96%E7%A0%94%E7%A9%B6%E6%96%B9%E6%B3%95%EF%BC%88%E7%AC%AC%E4%BA%94%E7%89%88%EF%BC%89%EF%BC%88%E4%B8%AD%E6%96%87%E7%89%88%EF%BC%89.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;《计算机体系结构：量化研究方法》&lt;/a&gt;。Neon是ARM平台的SIMD（Single Instruction Multiple Data，单指令多数据流）指令集实现，书中4.1~4.3讨论了SIMD，推荐阅读。
&lt;img src=&#34;https://loveleaves.github.io/imgs/system_architecture_chapters.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;system architecture chapters&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之所以能加速的&lt;strong&gt;原因总结&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（1）通过加长的寄存器减少数据的读取/写入次数，从而减少将数据读入寄存器的时间开销。例如Neon可以一次性将16个int8（16*8=128bit）数据读入专用寄存器，这一次读取时间开销，明显少于16个int8数据一个一个地读入的时间之和。写入同理。（注意不要和cache的减少访存时间的原理混淆。从cache读取余下的第2~第16个int8数据到寄存器仍然是要花费时钟周期的）。&lt;/li&gt;
&lt;li&gt;（2）执行SISD（single instruction, Single data，单指令流单数据流，这里可理解为标量计算）指令时，需要完成（时间开销大的）冒险（hazard）检查。既然使用SIMD指令计算，就暗示这些数据之间无依赖性，也就从指令集层面回避了不必要的时间开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;了解硬件决定的速度极限software-optimization-guide&#34;&gt;了解硬件决定的速度极限：Software Optimization Guide
&lt;/h3&gt;&lt;p&gt;我们可能还要关心，我们所编写的Neon Intrinsics，可以将手头上硬件的性能发挥到多少水平？是否还有提升空间？这些是好问题。&lt;/p&gt;
&lt;p&gt;在讨论一个问题前，先插入一个使笔者拍案叫绝的相关案例：在另一本计算经典&lt;a class=&#34;link&#34; href=&#34;https://github.com/Urinx/Books/blob/master/cs/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;《深入理解计算机系统》&lt;/a&gt;  （一般简称 CS:APP）的第5章 优化程序性能 中，该书作者考虑若干计算机硬件特性，将矩阵乘法连续优化了6个版本，直至优化到了该x86 CPU的吞吐量上限（注：对于某种指令，延迟latency 主要关注单条该指令的最小执行时间，吞吐量throughout主要关注单位时间内系统（一个CPU核）最多执行多少条该指令。因为AI计算的数据量比较大，我们更关注吞吐量）
&lt;img src=&#34;https://loveleaves.github.io/imgs/csapp_ans1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;CS:APP 相关数据截图&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;回到问题，我们需要知道我们的吞吐量上界是多少。ARM官方为每个CPU架构（手机CPU一般大核是A7X架构，小核是A5X架构）提供对应的Software Optimization Guide，里面有进行各种运算的latency和throughout。以A76架构（采用该架构作为大核架构的CPU例如骁龙855，麒麟980）为例子，从ARM官网下载对应的pdf（https://developer.arm.com/documentation/swog307215/a/?lang=en）
翻到ASIMD（Advance SIMD）那里，就能查阅各条Neon指令相应的latency和throughout。不同架构的吞吐量上界会有所不同，其他架构请自行在ARM官网文档中心下载。
&lt;img src=&#34;https://loveleaves.github.io/imgs/A76_Software_Optimization_Guide.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;A76 Software Optimization Guide截图&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;理论数据有了，至于如何通过实验测试峰值，可参考BBuf的文章 如何判断算法是否有可优化空间？ （https://zhuanlan.zhihu.com/p/268925243）&lt;/p&gt;
&lt;h3 id=&#34;反汇编分析生成代码质量&#34;&gt;反汇编分析生成代码质量
&lt;/h3&gt;&lt;p&gt;可通过反汇编的方式查看Intrinsics 生成的汇编是否满足预期，如果不满足预期则进行手写汇编优化。具体操作可参考梁德澎的文章 移动端arm cpu优化学习笔记第4弹&amp;ndash;内联汇编入门（https://zhuanlan.zhihu.com/p/143328317）&lt;/p&gt;
&lt;h2 id=&#34;materials&#34;&gt;materials
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;（1）研讨会视频 &lt;a class=&#34;link&#34; href=&#34;https://www.edge-ai-vision.com/2019/07/performance-analysis-for-optimizing-embedded-deep-learning-inference-software-a-presentation-from-arm/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&amp;ldquo;Performance Analysis for Optimizing Embedded Deep Learning Inference Software,&amp;rdquo; a Presentation from Arm - Edge AI and Vision Alliance&lt;/a&gt;，&lt;strong&gt;建立优化分析思维&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;（2）研讨会视频 &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=ixuDntaSnHIwww.youtube.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LCU14-504: Taming ARMv8 NEON: from theory to benchmark results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;（3）研讨会视频 &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=NYFzidaS3Z4www.youtube.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HKG15-408: ARM v8-A NEON optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;（4）Ne10（ARM官方的计算库）：https://github.com/projectNe10/Ne10&lt;/li&gt;
&lt;li&gt;（5）Arm Optimized Routines（ARM官方的计算、网络、字符串库）：https://github.com/ARM-software/optimized-routines&lt;/li&gt;
&lt;li&gt;（6）Neon优化Chromium的案例：https://developer.arm.com/documentation/101964/developer.arm.com&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;neon-介绍&#34;&gt;NEON 介绍
&lt;/h2&gt;&lt;p&gt;ARM NEON 是 ARM 架构的一种 SIMD（Single Instruction, Multiple Data）扩展，旨在加速多媒体、数字信号处理（DSP）、图像处理、音视频编解码、加密算法等高并发计算任务。NEON 是 ARMv7 （ARMv7-A只支持单精度，32x64-bit寄存器；Armv8-A AArch64支持双精度，32x128-bit寄存器，针对浮点操作的Vector Floating Point，VFP）及之后版本的处理器的标准扩展，广泛用于智能手机、嵌入式设备、平板电脑以及其他移动设备中，尤其是处理需要并行化的计算密集型应用时，它能显著提高性能。&lt;/p&gt;
&lt;h3 id=&#34;重要概念&#34;&gt;&lt;strong&gt;重要概念&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;lane&lt;/strong&gt;：如一个&lt;code&gt;float32x4_t&lt;/code&gt;类型的变量&lt;code&gt;float32x4_t v = {1.0f, 2.0f, 3.0f, 4.0f}&lt;/code&gt;，它占用 128 位，存储 4 个 32 位的浮点数，在这个向量寄存器 v 中，每个值依次存储在不同的lane序号为0、1、2、3中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;neon-寄存器&#34;&gt;&lt;strong&gt;NEON 寄存器&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：NEON 使用专门的寄存器来存储向量数据，这些寄存器通常用于处理多个数据元素，ARMv7-A只支持单精度，32x64-bit寄存器；Armv8-A AArch64支持双精度，32x128-bit寄存器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：NEON 寄存器组包含了 128 （Q字母）或 64（D字母） 位宽的寄存器，可以存储多个 8 位、16 位、32 位、64 位整数或浮点数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Q0-Q15&lt;/strong&gt;：128 位宽的 NEON 寄存器，用于存储 8 位、16 位、32 位、64 位的数据（整数或浮点数）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;D0-D15&lt;/strong&gt;：64 位宽的 NEON 寄存器，也用于存储 64 位数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;向量和标量操作&#34;&gt;&lt;strong&gt;向量和标量操作&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：NEON 支持对向量（多个元素）和标量（单个元素）进行操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：标量操作是普通的逐元素操作，而向量操作则允许一次性处理多个数据元素。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vadd.f32&lt;/code&gt;：向量浮点加法操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vadd.i32&lt;/code&gt;：向量整数加法操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;neon-数据类型&#34;&gt;&lt;strong&gt;NEON 数据类型&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：NEON 支持多种数据类型，包括整数、浮点数、双精度浮点数和混合类型数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：不同的数据类型适应不同的应用需求，如 8 位整数、32 位浮点数等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;i8, i16, i32, i64&lt;/strong&gt;：不同宽度的整数类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;f32, f64&lt;/strong&gt;：浮点数类型，支持单精度和双精度浮点数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;neon-指令集&#34;&gt;&lt;strong&gt;NEON 指令集&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：NEON 提供了一组专门的指令来处理数据并执行并行计算。NEON 指令包括加法、乘法、减法、移位、汇聚（归约）、比较、选择、数据类型转换等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：这些指令能够加速处理向量数据，尤其是应用于图像处理、音频处理、视频编解码、加密算法等领域。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;vadd&lt;/strong&gt;：向量加法指令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vmul&lt;/strong&gt;：向量乘法指令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vsub&lt;/strong&gt;：向量减法指令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vmax&lt;/strong&gt;：向量最大值选择指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;扩展数据类型&#34;&gt;&lt;strong&gt;扩展数据类型&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：NEON 提供了扩展数据类型的支持，如高/低16位扩展、饱和算术、向量数据类型转换等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：这种扩展数据类型用于在计算过程中执行高效的数据操作和转换，避免数据溢出或精度丢失。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;vshl&lt;/strong&gt;：向左移位操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vqadd&lt;/strong&gt;：饱和加法指令，防止数据溢出。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据载入和存储指令&#34;&gt;&lt;strong&gt;数据载入和存储指令&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：NEON 提供了一些专门的加载（load）和存储（store）指令，用于从内存中加载数据到寄存器，或将寄存器中的数据存储回内存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：这些指令能够优化内存访问，支持从多个内存地址加载和存储数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vld1&lt;/code&gt;：加载向量数据指令。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vst1&lt;/code&gt;：存储向量数据指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据汇聚和归约操作&#34;&gt;&lt;strong&gt;数据汇聚和归约操作&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：NEON 提供了对向量数据的汇聚（归约）操作，例如求和、最大值、最小值等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：这些操作通常用于计算总和、平均值、最大值等统计量，广泛应用于信号处理和数据分析中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;vaddv&lt;/strong&gt;：对向量元素进行加法归约，返回所有元素的和。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vmaxv&lt;/strong&gt;：对向量元素进行最大值归约，返回最大值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;条件执行&#34;&gt;&lt;strong&gt;条件执行&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：NEON 支持条件执行，通过设置条件码（flags），可以对某些指令的执行进行条件限制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：可以根据特定的条件执行指令，避免不必要的计算，提高性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vsel&lt;/code&gt;：根据掩码（mask）选择性地执行指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;simd-聚合指令广播操作&#34;&gt;&lt;strong&gt;SIMD 聚合指令（广播操作）&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：NEON 支持广播操作，允许单一标量值扩展到整个向量中。广播操作使得标量与向量的数据处理更加简便。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：通过广播操作，标量可以与向量中的每个元素进行计算，提高了指令的灵活性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vdup&lt;/code&gt;：将一个标量值复制到整个向量中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;neon-浮点数运算&#34;&gt;&lt;strong&gt;NEON 浮点数运算&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：NEON 支持单精度浮点数和双精度浮点数的运算，符合 IEEE 754 标准。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：这些浮点数运算指令可用于科学计算、图像处理等应用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;vadd.f32&lt;/strong&gt;：单精度浮点数向量加法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vmul.f32&lt;/strong&gt;：单精度浮点数向量乘法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据类型转换&#34;&gt;&lt;strong&gt;数据类型转换&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：NEON 支持多种类型之间的转换操作，如浮点与整数类型之间的转换。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：这种转换对于不同数据类型之间的运算非常重要，可以确保类型匹配并避免数据丢失。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;vcvt.f32.s32&lt;/strong&gt;：将 32 位整数转换为 32 位单精度浮点数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vcvt.s32.f32&lt;/strong&gt;：将 32 位单精度浮点数转换为 32 位整数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;向量掩码&#34;&gt;&lt;strong&gt;向量掩码&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：NEON 支持通过掩码控制哪些向量元素应该被操作。掩码机制允许在处理多个数据时根据特定条件选择性地操作某些元素。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：掩码可以控制并行操作的粒度，提高计算的灵活性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;vmla&lt;/strong&gt;：向量乘加指令，根据掩码控制哪些元素参与计算。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;neon-intrinsic&#34;&gt;NEON Intrinsic
&lt;/h2&gt;&lt;p&gt;兼容armv7和v8（部分指令可能不兼容），所以不同架构之间迁移方便，不需要改代码&lt;/p&gt;
&lt;h3 id=&#34;references-1&#34;&gt;References
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.arm.com/documentation/den0018/a/NEON-Intrinsics/Introduction&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;NEON-Intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.arm.com/documentation/102159/0400&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Neon Programmer Guide for Armv8-A Coding for Neon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.arm.com/architectures/instruction-sets/intrinsics/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;intrinsics检索&lt;/a&gt;，用来查看接口和支持架构&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cloud.tencent.com/developer/article/1814183&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ARM Neon Intrinsics 学习指北：从入门、进阶到学个通透&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/numpy/numpy/tree/main/numpy/_core/src/common/simd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;numpy simd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据和计算指令类型的格式&#34;&gt;数据和计算指令类型的格式
&lt;/h3&gt;&lt;p&gt;1、向量数据类型格式：&lt;code&gt;&amp;lt;type&amp;gt;&amp;lt;size&amp;gt;x&amp;lt;number of lanes&amp;gt;_t&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如&lt;code&gt;float32x4_t&lt;/code&gt;，&lt;type&gt;=float,&lt;size&gt;=32,&lt;number of lanes&gt;=4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;向量数据类型：
&lt;img src=&#34;https://loveleaves.github.io/imgs/neon_dataType.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;neon dataType&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;2、向量数组类型：&lt;code&gt;&amp;lt;type&amp;gt;&amp;lt;size&amp;gt;x&amp;lt;number of lanes&amp;gt;x&amp;lt;length of array&amp;gt;_t&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;struct int16x4x2_t
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int16x4_t val[2];
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;向量指令格式：&lt;code&gt;&amp;lt;opname&amp;gt;&amp;lt;flags&amp;gt;_&amp;lt;type&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如&lt;code&gt;vmulq_f32&lt;/code&gt;，&lt;opname&gt;=vmul，&lt;flags&gt;=q,&lt;type&gt;=f32&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;note&#34;&gt;Note
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;普通计算逻辑考虑优化编译器优化、类型量化等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;循环一&lt;/strong&gt;般用do-while的形式&lt;/li&gt;
&lt;li&gt;对于&lt;strong&gt;非整数倍元素个数&lt;/strong&gt;的解决方法： leftovers&lt;/li&gt;
&lt;li&gt;使用 NEON 的&lt;strong&gt;广播操作&lt;/strong&gt;，避免显示复制数据&lt;/li&gt;
&lt;li&gt;使用 NEON 的&lt;strong&gt;饱和操作&lt;/strong&gt;，避免数据溢出&lt;/li&gt;
&lt;li&gt;利用数据&lt;strong&gt;类型转换&lt;/strong&gt;操作，并合理进行量化&lt;/li&gt;
&lt;li&gt;利用shift、insert、mask等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;计算机组成结构运行相关通用&#34;&gt;计算机组成结构运行相关（通用）
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;并行&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;充分利用计算机流水线：去除数据依赖&lt;/li&gt;
&lt;li&gt;逻辑操作代替分支选择（分支预测）&lt;/li&gt;
&lt;li&gt;数据预加载（预取/并行）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;资源利用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;充分利用寄存器资源，分块处理数据，但避免寄存器溢出(Register Spilling）（测试时开启O2优化使编译器允许寄存器存储临时变量）&lt;/li&gt;
&lt;li&gt;内存合理对齐分配，按对应寄存器长度读取&lt;/li&gt;
&lt;li&gt;多线程处理，如OpenMP（并行/数据共享）&lt;/li&gt;
&lt;li&gt;利用数据连续特性、利用cache&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;neon-汇编&#34;&gt;NEON 汇编
&lt;/h2&gt;&lt;p&gt;可用&lt;code&gt;__aarch64__&lt;/code&gt;宏区分是armv8，否则armv7，针对性编写代码&lt;/p&gt;
&lt;h3 id=&#34;references-2&#34;&gt;References
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/143328317&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;移动端arm cpu优化学习笔记第4弹&amp;ndash;内联汇编入门&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;arm-内联汇编使用&#34;&gt;arm 内联汇编使用
&lt;/h3&gt;&lt;p&gt;arm内联汇编的一般格式，&lt;a class=&#34;link&#34; href=&#34;https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html#Using-Assembly-Language-with-C&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;detail&lt;/a&gt;、&lt;a class=&#34;link&#34; href=&#34;https://dillonzq.com/2019/08/c-%E8%AF%AD%E8%A8%80%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;docs&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;__asm__&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;qualifiers&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 汇编代码部分
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OutputOperands&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//在内联汇编代码中被修改的变量列表
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputOperands&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//在内联汇编代码中用到的变量列表
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Clobbers&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;//在内联汇编代码中用到的寄存器列表
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;note-1&#34;&gt;Note
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;先写intrinsic代码反汇编，学习编译器优化后的汇编代码，再优化&lt;/li&gt;
&lt;li&gt;重点关注指令流水线排布，避免CPU的&lt;strong&gt;Hazard&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>【SIMD】 Risc-v SIMD指令集RVV介绍</title>
        <link>https://loveleaves.github.io/p/rvv/</link>
        <pubDate>Thu, 06 Feb 2025 00:00:00 +0000</pubDate>
        
        <guid>https://loveleaves.github.io/p/rvv/</guid>
        <description>&lt;h2 id=&#34;references&#34;&gt;References
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://riscv.org/wp-content/uploads/2017/05/riscv-privileged-v1.10.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The RISC-V Instruction Set Manual Volume II: Privileged Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/riscvarchive/riscv-v-spec/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RVV spec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://occ-oss-prod.oss-cn-hangzhou.aliyuncs.com/resource/1836682/1638774209491/Xuantie&amp;#43;900&amp;#43;Series&amp;#43;RVV-0.7.1&amp;#43;Intrinsic&amp;#43;Manual.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Xuantie+900+Series+RVV-0.7.1+Intrinsic+Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;算子源码&#34;&gt;算子源码
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ARM-software/CMSIS_5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ARM-software/CMSIS&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://github.com/ARM-software/CMSIS-DSP&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CMSIS-DSP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Nuclei-Software/NMSIS&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Nuclei-software/NMSIS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;note&#34;&gt;Note
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;illegal instruction：修改CSR的mstatus标志位&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;important-concepts&#34;&gt;important concepts
&lt;/h2&gt;&lt;h3 id=&#34;vlen-vector-length&#34;&gt;&lt;strong&gt;VLEN (Vector Length)&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：向量寄存器的长度，表示每个寄存器可以存储的最大元素数量，通常是硬件设定的，例如 128 位、256 位或 512 位。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：决定向量寄存器的容量和能处理的数据量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;如果 VLEN 为 256 位且每个元素为 32 位整数，则每个寄存器最多存储 8 个元素（256 / 32 = 8）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;slen-stride-length&#34;&gt;&lt;strong&gt;SLEN (Stride Length)&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：元素在内存中的步长，即两个连续元素之间的内存偏移量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：影响内存访问模式，特别是在访问非连续内存时，SLEN 决定了元素之间的间隔。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;假设一个向量寄存器存储 4 个元素，每个元素大小为 32 位，而 SLEN 设置为 2，这意味着每个向量元素在内存中的位置间隔为 2 个 32 位单元。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;elen-element-length&#34;&gt;&lt;strong&gt;ELEN (Element Length)&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：每个向量元素的大小（单位：比特），决定了每个元素占用多少内存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：影响向量中每个元素的数据类型大小，在指令中用e表示，如e32。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;如果 ELEN 设置为 32 位，则每个向量元素为 32 位宽，可以是一个 32 位整数或 32 位浮点数。&lt;/li&gt;
&lt;li&gt;如果 ELEN 为 64 位，则每个元素占 64 位，适用于较大数据类型（如 64 位整数或浮点数）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lmul-vector-register-grouping-factor&#34;&gt;&lt;strong&gt;LMUL (Vector Register Grouping Factor)&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：向量寄存器的分组因子，控制每个向量寄存器内元素的数量，决定寄存器的并行度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：LMUL 会影响每个向量寄存器中包含的元素数量，从而影响并行性，在指令中用m表示，如m1。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;LMUL = 1：每个寄存器存储最大数量的元素（假设 VLEN = 256 位，ELEN = 32 位，则每个寄存器存储 8 个元素）。&lt;/li&gt;
&lt;li&gt;LMUL = 2：每个寄存器只存储 4 个元素，寄存器总数增加，适合提高并行度。&lt;/li&gt;
&lt;li&gt;LMUL = 4：每个寄存器只存储 2 个元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vl-vector-length-register&#34;&gt;&lt;strong&gt;VL (Vector Length Register)&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：VL 是一个寄存器，用来控制当前向量指令的长度，即当前指令能处理的元素数量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：在 RVV 指令中，VL 决定了向量运算的迭代次数，向量操作将执行 VL 次。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;如果 VL = 4，那么该指令将对前 4 个向量元素执行操作，用setvl(max)指令可以得到指令类型的最大元素数量，其中每个指令指定vl可处理不同数量的元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vtype-vector-type-register&#34;&gt;&lt;strong&gt;VTYPE (Vector Type Register)&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：VTYPE 控制向量操作的类型，如元素长度 (ELEN) 和 LMUL 的配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：配置向量操作的具体参数，帮助硬件理解如何处理向量指令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;VTYPE 设置为 ELEN = 32 位，LMUL = 1，表示每个向量寄存器存储 32 位元素，且每个寄存器的并行度为 1。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vector-mask-vmsk&#34;&gt;&lt;strong&gt;Vector Mask (vmsk)&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：向量掩码用于控制哪些向量元素应该被操作，哪些应该被忽略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：掩码机制使得程序能够选择性地执行向量操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;若 &lt;code&gt;vmsk = 11110000&lt;/code&gt;（二进制），则只有前 4 个向量元素会被操作，后 4 个元素将被忽略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vector-registers-v0---vn&#34;&gt;&lt;strong&gt;Vector Registers (v0 - vn)&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：向量寄存器用于存储向量数据，RISC-V 定义了 v0 到 v31 的向量寄存器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：这些寄存器用于存储和处理向量数据，数量和大小可由硬件决定。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v0&lt;/code&gt; 和 &lt;code&gt;v1&lt;/code&gt; 可以分别存储 256 位的向量数据，适用于不同长度的数据类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vector-loadstore-instructions&#34;&gt;&lt;strong&gt;Vector Load/Store Instructions&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：向量加载和存储指令，用于将数据从内存加载到向量寄存器，或将向量寄存器中的数据存储回内存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：支持各种内存访问模式，如连续或非连续访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vlb&lt;/code&gt;：加载字节数据到向量寄存器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vsb&lt;/code&gt;：将字节数据存储回内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vector-arithmetic-instructions&#34;&gt;&lt;strong&gt;Vector Arithmetic Instructions&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：向量算术指令用于执行向量加法、减法、乘法、除法等算术运算。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：向量算术指令在多核处理器中并行执行运算。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vadd&lt;/code&gt;：向量加法，执行两个向量的逐元素加法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vmul&lt;/code&gt;：向量乘法，执行两个向量的逐元素乘法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vector-compare-instructions&#34;&gt;&lt;strong&gt;Vector Compare Instructions&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：向量比较指令用于比较向量中的元素，返回布尔掩码结果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：常用于条件判断和控制流。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vseq&lt;/code&gt;：判断两个向量的元素是否相等，结果返回掩码。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vsgt&lt;/code&gt;：判断向量元素是否大于另一个向量，返回布尔掩码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vector-reduction-instructions&#34;&gt;&lt;strong&gt;Vector Reduction Instructions&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：向量归约指令用于将向量中的多个元素归约为一个单一结果，如求和、求最大值等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：常用于矩阵运算、图像处理等应用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vredsum&lt;/code&gt;：求和，将向量中所有元素相加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vredmax&lt;/code&gt;：求最大值，返回向量中的最大元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vector-scattergather-instructions&#34;&gt;&lt;strong&gt;Vector Scatter/Gather Instructions&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：用于从非连续的内存地址中加载数据或将数据存储到非连续的内存地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：提高对非连续内存的访问效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vscatter&lt;/code&gt;：将向量元素存储到不连续的内存位置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vgather&lt;/code&gt;：从不连续的内存位置加载数据到向量寄存器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vector-scalar-operations&#34;&gt;&lt;strong&gt;Vector-Scalar Operations&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：向量与标量之间的操作，允许标量与每个向量元素进行逐一运算。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：通过标量与向量元素的结合，处理常数数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vaddvi&lt;/code&gt;：将一个标量与向量中的每个元素相加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vmulvi&lt;/code&gt;：将一个标量与向量中的每个元素相乘。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vector-predication&#34;&gt;&lt;strong&gt;Vector Predication&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：根据掩码或布尔条件选择性执行向量操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：通过掩码决定哪些元素进行计算，哪些跳过。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vmand&lt;/code&gt;：与掩码进行与运算，满足条件的元素进行计算。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vector-tail--masking&#34;&gt;&lt;strong&gt;Vector Tail &amp;amp; Masking&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：当 VL 不能完全填充向量寄存器时，通过尾部掩码控制哪些元素需要操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：避免浪费计算资源，确保运算的有效性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;如果 VL = 5，而寄存器有 8 个元素，掩码将控制只操作前 5 个元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vector-unit-vu&#34;&gt;&lt;strong&gt;Vector Unit (VU)&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：向量单元是硬件中的计算单元，负责执行向量指令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：处理向量计算，提高处理器的并行度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在支持 RVV 的处理器中，向量单元可以同时处理多个向量运算。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;note-1&#34;&gt;Note
&lt;/h2&gt;&lt;h3 id=&#34;常见使用方式&#34;&gt;常见使用方式
&lt;/h3&gt;&lt;p&gt;以float32类型dot计算为例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;riscv_dot_prod_f32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;float32_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pSrcA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;float32_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pSrcB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;blockSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;float32_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;float32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;blkCnt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;blockSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;vfloat32m8_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v_A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v_B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;vfloat32m8_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vsum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__riscv_vsetvlmax_e32m8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;vsum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__riscv_vfmv_v_f_f32m8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__riscv_vsetvl_e32m8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;blkCnt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;blkCnt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;v_A&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__riscv_vle32_v_f32m8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pSrcA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;pSrcA&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;v_B&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__riscv_vle32_v_f32m8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pSrcB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;pSrcB&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;vsum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__riscv_vfmacc_vv_f32m8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vsum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v_A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v_B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__riscv_vsetvl_e32m8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;vfloat32m1_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp00&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__riscv_vfmv_v_f_f32m1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__riscv_vsetvlmax_e32m8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;temp00&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__riscv_vfredusum_vs_f32m8_f32m1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vsum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp00&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__riscv_vfmv_f_s_f32m1_f32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp00&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>Hugo &#43; Github 免费部署自己的博客</title>
        <link>https://loveleaves.github.io/p/hugo-blog/</link>
        <pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate>
        
        <guid>https://loveleaves.github.io/p/hugo-blog/</guid>
        <description>&lt;h2 id=&#34;环境准备&#34;&gt;环境准备
&lt;/h2&gt;&lt;h3 id=&#34;11-git下载&#34;&gt;1.1 Git下载
&lt;/h3&gt;&lt;p&gt;前往【Git官网】，下载安装程序
一直点下一步，默认安装即可&lt;/p&gt;
&lt;h3 id=&#34;hugo下载&#34;&gt;Hugo下载
&lt;/h3&gt;&lt;p&gt;前往【Hugo Github Tags】，选择对应版本下载，下载后解压即可
Windows下载版本：hugo_extended_xxxxx_windows_amd64.zip&lt;/p&gt;
&lt;h2 id=&#34;搭建博客&#34;&gt;搭建博客
&lt;/h2&gt;&lt;h3 id=&#34;创建博客&#34;&gt;创建博客
&lt;/h3&gt;&lt;p&gt;（1）在hugo.exe所在文件夹的地址栏敲打cmd，然后Enter唤起命令行&lt;/p&gt;
&lt;p&gt;（2）敲打命令hugo new site xxxx创建hugo文件&lt;/p&gt;
&lt;p&gt;（3）敲打命名cd xxxx切换目录，并把hugo.exe复制到刚生成的文件夹中&lt;/p&gt;
&lt;p&gt;（4）敲打命令hugo server -D启动服务，访问http://localhost:1313，Ctrl+C停止服务 （hugo默认是没有主题的，需要进行主题配置）&lt;/p&gt;
&lt;h3 id=&#34;配置主题&#34;&gt;配置主题
&lt;/h3&gt;&lt;p&gt;（1）前往【Hugo Themes】，查找自己喜欢的主题，进行下载&lt;/p&gt;
&lt;p&gt;（2）这边以【Stack主题】为例，将下载好的主题解压，放到/themes文件夹中&lt;/p&gt;
&lt;p&gt;（3）将exampleSite样例数据中的 Content 和 hugo.yaml 复制到主文件夹中，并删掉hugo.toml和content/post/rich-content&lt;/p&gt;
&lt;p&gt;（4）修改 hugo.yaml 中的 theme，将他修改为跟主题文件夹同名&lt;/p&gt;
&lt;p&gt;（5）再次启动hugo服务，查看主题，具体主题配置修改 hugo.yaml，这里不细说，感兴趣可自行查找相关文章&lt;/p&gt;
&lt;h2 id=&#34;启用-giscus-评论&#34;&gt;启用 Giscus 评论
&lt;/h2&gt;&lt;p&gt;Giscus 是利用 GitHub Discussions 实现的评论系统，开源、无跟踪、无广告、永久免费。&lt;/p&gt;
&lt;p&gt;Hugo 对 Giscus 有很好的支持，在 hugo-theme-jane 主题中配置启用Giscus 很简单。&lt;/p&gt;
&lt;p&gt;要启用 Giscus 请先确保：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仓库是公开的，否则访客将无法查看 discussions。
giscus app 已安装，否则访客将无法评论和回应。&lt;/li&gt;
&lt;li&gt;Discussions 功能已在你的仓库中启用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前面搭建的博客仓库就是公开的，满足了第一点，接下来要做的就是安装 Giscus app 和启用 Discussions。&lt;/p&gt;
&lt;h3 id=&#34;references&#34;&gt;References
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.codeaer.com/post/enable-giscus-comments-in-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.codeaer.com/post/enable-giscus-comments-in-hugo/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置 Giscus 根据版本有所不同，0.143.1版本可使用以下模板&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# repoId、categoryId参考网址修改：https://giscus.app/zh-CN
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;giscus:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    repo: &amp;#34;xxx/xxx.github.io&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    repoId: &amp;#34;xxx&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    category: &amp;#34;General&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    categoryId: &amp;#34;xxx&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    mapping: &amp;#34;pathname&amp;#34;  # comment value is the default value
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    strict: 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    reactionsEnabled: 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    # emitMetadata: 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    inputPosition: &amp;#34;top&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    theme: &amp;#34;dark&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    lang: &amp;#34;zh-CN&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    lazyLoading: true
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    crossorigin: &amp;#34;anonymous&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;github部署&#34;&gt;Github部署
&lt;/h2&gt;&lt;h3 id=&#34;常规部署&#34;&gt;常规部署
&lt;/h3&gt;&lt;p&gt;（1）前往【Github官网】，创建仓库 {github用户名}.github.io&lt;/p&gt;
&lt;p&gt;（2）前往Setting -&amp;gt; Pages -&amp;gt; Branch选择main分支，然后保存，会自动开启 https://{github用户名}.github.io 的地址，这地址也是以后访问博客的地址&lt;/p&gt;
&lt;p&gt;（3）回到hugo文件中，执行命令hugo -D，会生成 public 静态资源文件夹&lt;/p&gt;
&lt;p&gt;（4）在 public 执行以下命令上传到github仓库上，第一次上传可能需要输入账号密码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit -m &amp;#34;first commit&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch -M main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote add origin {你的github仓库地址}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push -u origin main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;（5）上传成功后访问 https://{github用户名}.github.io，成功搭建属于自己的Hugo博客&lt;/p&gt;
&lt;h3 id=&#34;github-action自动部署&#34;&gt;Github Action自动部署
&lt;/h3&gt;&lt;p&gt;（1）Github创建一个新的仓库，用于存放Hugo的主文件&lt;/p&gt;
&lt;p&gt;（2）前往Setttings -&amp;gt; Developer Settings -&amp;gt; Personal access tokens，创建一个token(classic)&lt;/p&gt;
&lt;p&gt;（3）token选择永不过期，并勾选 repo 和 workflow 选项&lt;/p&gt;
&lt;p&gt;（4）为保证安全，将生成的token，保存的仓库的变量中，前往Settings -&amp;gt; Secrets and variables -&amp;gt; Actions中设置&lt;/p&gt;
&lt;p&gt;（5）在hugo主文件创建一个.github/workflows/xxxx.yaml文件，将以下内容复制进去，想具体了解更多，可查看【Github Action文档】&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;name: deploy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 代码提交到main分支时触发github action
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;on:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  push:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    branches:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      - main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jobs:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  deploy:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    runs-on: ubuntu-latest
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    steps:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        - name: Checkout
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          uses: actions/checkout@v4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          with:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              fetch-depth: 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        - name: Setup Hugo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          uses: peaceiris/actions-hugo@v3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          with:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              hugo-version: &amp;#34;latest&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              extended: true
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        - name: Build Web
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          run: hugo -D
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        - name: Deploy Web
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          uses: peaceiris/actions-gh-pages@v4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          with:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              PERSONAL_TOKEN: ${{ secrets.你的token变量名 }}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              EXTERNAL_REPOSITORY: 你的github名/你的仓库名
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              PUBLISH_BRANCH: main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              PUBLISH_DIR: ./public
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              commit_message: auto deploy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;（6）在hugo主文件创建.gitignore文件，来避免提交不必要的文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 自动生成的文件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;public
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;resources
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.hugo_build.lock
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# hugo命令
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo.exe
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;（7）将hugo的主文件上传到仓库，上传成功后会触发Github Action，来自动部署你的静态页面&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit -m &amp;#34;first commit&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch -M main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote add origin {你的github仓库地址}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push -u origin main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;reference&#34;&gt;Reference
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://letere-gzj.github.io/hugo-stack/p/hugo/custom-blog/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://letere-gzj.github.io/hugo-stack/p/hugo/custom-blog/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
